// AST is only for expressions, so it's expression tree (ET)

primary   @ET_num i-val   @ET_char i-val   @ET_str s-id   // enum is also ET_num
          @ET_fn f-id                                     // if id is function
          @ET_var v-id                                    // var, array, arg

call      @ET_call fn 0          // fn must be @ET_fn f-id
          @ET_call fn exprs

exprs     expr;0                 // i.e. a simple linked list of expr's
          expr;exprs

index     @ET_index e1 e2        // e1 can be var or expr giving T*

unexpr    'i' expr   'd' expr    // ++x --x -- expr must be var or *x or x[y]
          '~' expr   '!' expr
          @ET_neg expr           // -x
          @ET_star expr          // *x

term      @ET_cast type+stars expr

binop     '*' '/' '%' '+' '-' '<' '>' 'l' 'g' 'e' 'n' '&' '^' '|' 'a' 'o' '='

expr      binop e1 e2            // for '=' e1 must be var or *x or x[y]


# vim: set syntax=ANTLR :
