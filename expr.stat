E:ret (|| (|| (&& (>= (Var c |Int) (Num 97 |Char) |Int) (<= (Var c |Int) (Num 122 |Char) |Int) |Int) (&& (>= (Var c |Int) (Num 65 |Char) |Int) (<= (Var c |Int) (Num 90 |Char) |Int) |Int) |Int) (== (Var c |Int) (Num 95 |Char) |Int) |Int)
E:fr2 (> (Var n |Int) (Num 0 |Int) |Int)
E:fr3 [(++ (Var d |Char*) |Char*) (++ (Var s |Char*) |Char*) (-- (Var n |Int) |Int)]
E:exp (= (@ (Var d |Char*) |Char) (@ (Var s |Char*) |Char) |Char)
E:fr2 (> (Var n |Int) (Num 0 |Int) |Int)
E:fr3 [(-- (Var n |Int) |Int) (++ (Var s |Char*) |Char*)]
E:iff (== (@ (Var s |Char*) |Char) (Var c |Int) |Int)
E:ret (Var s |Char*)
E:ret (Num 0 |Int)
E:var (Var s |Char*)
E:whl (@ (Var s |Char*) |Char)
E:exp (++ (Var s |Char*) |Char*)
E:ret (- (Var s |Char*) (Var b |Char*) |Int)
E:var (Call (Fn strlen |Int) [(Var s |Char*)] |Int)
E:var (Call (Fn malloc |Char*) [(+ (Var n |Int) (Num 1 |Int) |Int)] |Char*)
E:exp (Call (Fn memcopy |Void) [(Var d |Char*) (Var s |Char*) (+ (Var n |Int) (Num 1 |Int) |Int)] |Void)
E:ret (Var d |Char*)
E:var (Call (Fn strlen |Int) [(Var s |Char*)] |Int)
E:iff (<= (Var n |Int) (Num 1 |Int) |Int)
E:ret (Var s |Char*)
E:var (Var s |Char*)
E:var (- (+ (Var s |Char*) (Var n |Int) |Char*) (Num 1 |Int) |Char*)
E:fr2 (< (Var b |Char*) (Var e |Char*) |Int)
E:fr3 [(++ (Var b |Char*) |Char*) (-- (Var e |Char*) |Char*)]
E:var (@ (Var e |Char*) |Char)
E:exp (= (@ (Var e |Char*) |Char) (@ (Var b |Char*) |Char) |Char)
E:exp (= (@ (Var b |Char*) |Char) (Var t |Char) |Char)
E:ret (Var s |Char*)
E:fr2 (@ (Var t |Char*) |Char)
E:fr3 [(++ (Var s |Char*) |Char*) (++ (Var t |Char*) |Char*)]
E:iff (|| (== (@ (Var s |Char*) |Char) (Num 0 |Int) |Int) (< (@ (Var s |Char*) |Char) (@ (Var t |Char*) |Char) |Int) |Int)
E:ret (Neg (Num 1 |Int) |Int)
E:iff (> (@ (Var s |Char*) |Char) (@ (Var t |Char*) |Char) |Int)
E:ret (Num 1 |Int)
E:ret (!= (@ (Var s |Char*) |Char) (Num 0 |Int) |Int)
E:ret (== (Call (Fn strcmp |Int) [(Var s |Char*) (Var t |Char*)] |Int) (Num 0 |Int) |Int)
E:var (Call (Fn strlen |Int) [(Var s |Char*)] |Int)
E:fr2 (> (Var n |Int) (Num 0 |Int) |Int)
E:fr3 [(-- (Var n |Int) |Int)]
E:iff (== (@ (+ (Var s |Char*) (- (Var n |Int) (Num 1 |Int) |Int) |Char*) |Char) (Var c |Int) |Int)
E:ret (+ (Var s |Char*) (- (Var n |Int) (Num 1 |Int) |Int) |Char*)
E:ret (Num 0 |Int)
E:var (Var str_repr_buf |Char*)
E:exp (= (@ (Var d |Char*) |Char) (Num 34 |Char) |Char)
E:exp (++ (Var d |Char*) |Char*)
E:fr2 (@ (Var s |Char*) |Char)
E:fr3 [(++ (Var d |Char*) |Char*) (++ (Var s |Char*) |Char*)]
E:iff (== (@ (Var s |Char*) |Char) (Num 10 |Char) |Int)
E:exp (= (@ (Var d |Char*) |Char) (Num 92 |Char) |Char)
E:exp (= (@ (++ (Var d |Char*) |Char*) |Char) (Num 110 |Char) |Char)
E:iff (== (@ (Var s |Char*) |Char) (Num 0 |Int) |Int)
E:exp (= (@ (Var d |Char*) |Char) (Num 92 |Char) |Char)
E:exp (= (@ (++ (Var d |Char*) |Char*) |Char) (Num 48 |Char) |Char)
E:iff (== (@ (Var s |Char*) |Char) (Num 8 |Char) |Int)
E:exp (= (@ (Var d |Char*) |Char) (Num 92 |Char) |Char)
E:exp (= (@ (++ (Var d |Char*) |Char*) |Char) (Num 98 |Char) |Char)
E:iff (== (@ (Var s |Char*) |Char) (Num 13 |Char) |Int)
E:exp (= (@ (Var d |Char*) |Char) (Num 92 |Char) |Char)
E:exp (= (@ (++ (Var d |Char*) |Char*) |Char) (Num 114 |Char) |Char)
E:exp (= (@ (Var d |Char*) |Char) (@ (Var s |Char*) |Char) |Char)
E:exp (= (@ (Var d |Char*) |Char) (Num 34 |Char) |Char)
E:exp (= (@ (++ (Var d |Char*) |Char*) |Char) (Num 0 |Char) |Char)
E:ret (Var str_repr_buf |Char*)
E:iff (== (Var value |Int) (Num 0 |Int) |Int)
E:ret (Str "0" |Char*)
E:var (Var i2s_buf |Char*)
E:iff (< (Var value |Int) (Num 0 |Int) |Int)
E:iff (== (Var value |Int) (- (Neg (Num 2147483647 |Int) |Int) (Num 1 |Int) |Int) |Int)
E:ret (Str "-2147483648" |Char*)
E:exp (= (@ (Var dst |Char*) |Char) (Num 45 |Char) |Char)
E:exp (++ (Var dst |Char*) |Char*)
E:exp (= (Var value |Int) (Neg (Var value |Int) |Int) |Int)
E:var (Var dst |Char*)
E:fr2 (!= (Var value |Int) (Num 0 |Int) |Int)
E:fr3 [(++ (Var dst |Char*) |Char*)]
E:exp (= (@ (Var dst |Char*) |Char) (Cast Char (+ (% (Var value |Int) (Num 10 |Int) |Int) (Num 48 |Char) |Int) |Char) |Char)
E:exp (= (Var value |Int) (/ (Var value |Int) (Num 10 |Int) |Int) |Int)
E:exp (= (@ (Var dst |Char*) |Char) (Num 0 |Int) |Int)
E:exp (Call (Fn strrev |Char*) [(Var to_rev |Char*)] |Char*)
E:ret (Var i2s_buf |Char*)
E:exp (Call (Fn write |Int) [(Num 1 |Int) (Var s |Char*) (Call (Fn strlen |Int) [(Var s |Char*)] |Int)] |Int)
E:exp (Call (Fn p1 |Void) [(Var s |Char*)] |Void)
E:exp (Call (Fn p1 |Void) [(Var s2 |Char*)] |Void)
E:exp (Call (Fn p1 |Void) [(Var s |Char*)] |Void)
E:exp (Call (Fn p1 |Void) [(Var s2 |Char*)] |Void)
E:exp (Call (Fn p1 |Void) [(Var s3 |Char*)] |Void)
E:exp (Call (Fn p1 |Void) [(Var s |Char*)] |Void)
E:exp (Call (Fn p1 |Void) [(Var s2 |Char*)] |Void)
E:exp (Call (Fn p1 |Void) [(Var s3 |Char*)] |Void)
E:exp (Call (Fn p1 |Void) [(Var s4 |Char*)] |Void)
E:exp (Call (Fn write |Int) [(Num 1 |Int) (Str "\n" |Char*) (Num 1 |Int)] |Int)
E:exp (Call (Fn write |Int) [(Num 1 |Int) (Var s |Char*) (Call (Fn strlen |Int) [(Var s |Char*)] |Int)] |Int)
E:exp (Call (Fn p0n |Void) [] |Void)
E:exp (Call (Fn p1 |Void) [(Var s |Char*)] |Void)
E:exp (Call (Fn p1 |Void) [(Var s2 |Char*)] |Void)
E:exp (Call (Fn p0n |Void) [] |Void)
E:exp (Call (Fn p1 |Void) [(Var s |Char*)] |Void)
E:exp (Call (Fn p1 |Void) [(Var s2 |Char*)] |Void)
E:exp (Call (Fn p1 |Void) [(Var s3 |Char*)] |Void)
E:exp (Call (Fn p0n |Void) [] |Void)
E:iff (!= (Var cond |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn write |Int) [(Num 2 |Int) (Str "ASSERT FAILED: " |Char*) (Num 15 |Int)] |Int)
E:exp (Call (Fn write |Int) [(Num 2 |Int) (Var msg |Char*) (Call (Fn strlen |Int) [(Var msg |Char*)] |Int)] |Int)
E:exp (Call (Fn write |Int) [(Num 2 |Int) (Str "\n" |Char*) (Num 1 |Int)] |Int)
E:exp (Call (Fn before_exit |Void) [] |Void)
E:exp (Call (Fn exit |Void) [(Num 1 |Int)] |Void)
E:exp (Call (Fn p2wLN |Void) [(Str "Warning" |Char*) (Var msg |Char*)] |Void)
E:exp (Call (Fn p2wLN |Void) [(Str "Error" |Char*) (Var msg |Char*)] |Void)
E:exp (Call (Fn before_exit |Void) [] |Void)
E:exp (Call (Fn exit |Void) [(Num 1 |Int)] |Void)
E:exp (Call (Fn p2wLN |Void) [(Str "Error" |Char*) (Var msg |Char*)] |Void)
E:exp (Call (Fn p2n |Void) [(Str "*** " |Char*) (Var m2 |Char*)] |Void)
E:exp (Call (Fn before_exit |Void) [] |Void)
E:exp (Call (Fn exit |Void) [(Num 1 |Int)] |Void)
E:var (Num 0 |Int)
E:fr2 (< (Var i |Int) (Num 10 |Int) |Int)
E:fr3 [(++ (Var i |Int) |Int)]
E:iff (Call (Fn strequ |Int) [(Var s |Char*) (@ (+ (Var KWDS |Char**) (Var i |Int) |Char**) |Char*)] |Int)
E:ret (Var i |Int)
E:ret (Neg (Num 1 |Int) |Int)
E:var (Num 0 |Int)
E:fr2 (@ (+ (Var OPS |Char*) (Var i |Int) |Char*) |Char)
E:fr3 [(++ (Var i |Int) |Int)]
E:exp (= (@ (+ (Var op_prec |Int*) (@ (+ (Var OPS |Char*) (Var i |Int) |Char*) |Char) |Int*) |Int) (- (@ (+ (Var PRC |Char*) (Var i |Int) |Char*) |Char) (Num 48 |Char) |Int) |Int)
E:iff (>= (Var rd_char_pos |Int) (Var rd_buf_len |Int) |Int)
E:exp (= (Var rd_buf_len |Int) (Call (Fn read |Int) [(Var rd_file |Int) (Var rd_buf |Char*) (- (Num 8000 |Int) (Num 1 |Int) |Int)] |Int) |Int)
E:iff (<= (Var rd_buf_len |Int) (Num 0 |Int) |Int)
E:exp (= (Var rd_char |Int) (Neg (Num 1 |Int) |Int) |Int)
E:exp (= (@ (+ (Var rd_buf |Char*) (Var rd_buf_len |Int) |Char*) |Char) (Num 0 |Int) |Int)
E:exp (= (Var rd_char_pos |Int) (Num 0 |Int) |Int)
E:exp (= (Var rd_char |Int) (@ (+ (Var rd_buf |Char*) (Var rd_char_pos |Int) |Char*) |Char) |Int)
E:exp (++ (Var rd_char_pos |Int) |Int)
E:iff (< (Var rd_char |Int) (Num 0 |Int) |Int)
E:exp (= (Var rd_char |Int) (+ (Var rd_char |Int) (Num 256 |Int) |Int) |Int)
E:exp (Call (Fn p4 |Void) [(Str "\n*** " |Char*) (Var sev |Char*) (Str " at or before line " |Char*) (Call (Fn i2s |Char*) [(Var rd_line |Int)] |Char*)] |Void)
E:exp (Call (Fn p2n |Void) [(Str "\n*** " |Char*) (Var msg |Char*)] |Void)
E:exp (= (Var id_table |Char**) (Cast Char** (Call (Fn malloc |Char*) [(* (Num 4 |Int) (Var n |Int) |Int)] |Char*) |Char**) |Char**)
E:exp (= (Var id_table_dim |Int) (Var n |Int) |Int)
E:exp (-- (Var n |Int) |Int)
E:fr2 (>= (Var n |Int) (Num 0 |Int) |Int)
E:fr3 [(-- (Var n |Int) |Int)]
E:exp (= (@ (+ (Var id_table |Char**) (Var n |Int) |Char**) |Char*) (Num 0 |Int) |Char*)
E:var (Num 5381 |Int)
E:fr2 (@ (Var s |Char*) |Char)
E:fr3 [(++ (Var s |Char*) |Char*)]
E:exp (= (Var h |Int) (% (+ (* (Var h |Int) (Num 66 |Int) |Int) (@ (Var s |Char*) |Char) |Int) (Num 16777216 |Int) |Int) |Int)
E:ret (Var h |Int)
E:iff (Var IT_DEBUG |Int)
E:exp (Call (Fn p1 |Void) [(Var s |Char*)] |Void)
E:var (% (Call (Fn id_hash |Int) [(Var s |Char*)] |Int) (Var id_table_dim |Int) |Int)
E:var (Var h |Int)
E:var (Num 0 |Int)
E:whl (@ (+ (Var id_table |Char**) (Var h |Int) |Char**) |Char*)
E:iff (Call (Fn strequ |Int) [(@ (+ (Var id_table |Char**) (Var h |Int) |Char**) |Char*) (Var s |Char*)] |Int)
E:iff (Var IT_DEBUG |Int)
E:exp (Call (Fn p2n |Void) [(Str " == " |Char*) (Call (Fn i2s |Char*) [(Var h |Int)] |Char*)] |Void)
E:ret (Var h |Int)
E:exp (= (Var h |Int) (% (+ (Var h |Int) (Num 1 |Int) |Int) (Var id_table_dim |Int) |Int) |Int)
E:iff (== (Var h |Int) (Var h0 |Int) |Int)
E:exp (Call (Fn err1 |Void) [(Str "Too many ids; id_table is full" |Char*)] |Void)
E:exp (= (Var collision |Int) (Num 1 |Int) |Int)
E:iff (Var collision |Int)
E:exp (++ (Var collisions |Int) |Int)
E:iff (Var IT_DEBUG |Int)
E:exp (Call (Fn p2n |Void) [(Str " ++ " |Char*) (Call (Fn i2s |Char*) [(Var h |Int)] |Char*)] |Void)
E:exp (= (@ (+ (Var id_table |Char**) (Var h |Int) |Char**) |Char*) (Call (Fn strdup |Char*) [(Var s |Char*)] |Char*) |Char*)
E:exp (++ (Var id_count |Int) |Int)
E:ret (Var h |Int)
E:var (Num 0 |Int)
E:var (Num 0 |Int)
E:fr2 (< (Var i |Int) (Var id_table_dim |Int) |Int)
E:fr3 [(++ (Var i |Int) |Int)]
E:iff (@ (+ (Var id_table |Char**) (Var i |Int) |Char**) |Char*)
E:exp (++ (Var k |Int) |Int)
E:exp (Call (Fn p3n |Void) [(Call (Fn i2s |Char*) [(Var i |Int)] |Char*) (Str " " |Char*) (@ (+ (Var id_table |Char**) (Var i |Int) |Char**) |Char*)] |Void)
E:exp (Call (Fn p1 |Void) [(Str "-------------------------------------\n" |Char*)] |Void)
E:exp (Call (Fn p2 |Void) [(Call (Fn i2s |Char*) [(Var k |Int)] |Char*) (Str " ids, " |Char*)] |Void)
E:exp (Call (Fn assert |Void) [(== (Var k |Int) (Var id_count |Int) |Int) (Str "Errors in id_table (negative hash?)" |Char*)] |Void)
E:exp (Call (Fn p2 |Void) [(Call (Fn i2s |Char*) [(Var collisions |Int)] |Char*) (Str " collisions\n" |Char*)] |Void)
E:exp (= (Var sl_table |Char**) (Cast Char** (Call (Fn malloc |Char*) [(* (Var n |Int) (Num 4 |Int) |Int)] |Char*) |Char**) |Char**)
E:exp (= (Var sl_count |Int) (Num 0 |Int) |Int)
E:var (Num 0 |Int)
E:fr2 (< (Var i |Int) (Var sl_count |Int) |Int)
E:fr3 [(++ (Var i |Int) |Int)]
E:iff (Call (Fn strequ |Int) [(Var s |Char*) (@ (+ (Var sl_table |Char**) (Var i |Int) |Char**) |Char*)] |Int)
E:ret (Var i |Int)
E:iff (== (Var sl_count |Int) (Num 500 |Int) |Int)
E:exp (Call (Fn err1 |Void) [(Str "Too many literal strings" |Char*)] |Void)
E:exp (= (@ (+ (Var sl_table |Char**) (Var sl_count |Int) |Char**) |Char*) (Call (Fn strdup |Char*) [(Var s |Char*)] |Char*) |Char*)
E:exp (++ (Var sl_count |Int) |Int)
E:ret (- (Var sl_count |Int) (Num 1 |Int) |Int)
E:var (Num 0 |Int)
E:fr2 (< (Var i |Int) (Var sl_count |Int) |Int)
E:fr3 [(++ (Var i |Int) |Int)]
E:exp (Call (Fn p3n |Void) [(Call (Fn i2s |Char*) [(Var i |Int)] |Char*) (Str " -> " |Char*) (Call (Fn str_repr |Char*) [(@ (+ (Var sl_table |Char**) (Var i |Int) |Char**) |Char*)] |Char*)] |Void)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:iff (== (Var rd_char |Int) (Num 110 |Char) |Int)
E:exp (= (Var rd_char |Int) (Num 10 |Char) |Int)
E:iff (== (Var rd_char |Int) (Num 114 |Char) |Int)
E:exp (= (Var rd_char |Int) (Num 13 |Char) |Int)
E:iff (== (Var rd_char |Int) (Num 98 |Char) |Int)
E:exp (= (Var rd_char |Int) (Num 8 |Char) |Int)
E:iff (== (Var rd_char |Int) (Num 48 |Char) |Int)
E:exp (= (Var rd_char |Int) (Num 0 |Int) |Int)
E:iff (< (Var rd_char |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:exp (= (Var rd_line |Int) (Num 1 |Int) |Int)
E:exp (Call (Fn cg_line |Void) [] |Void)
E:whl (|| (|| (== (Var rd_char |Int) (Num 32 |Char) |Int) (== (Var rd_char |Int) (Num 10 |Char) |Int) |Int) (== (Var rd_char |Int) (Num 13 |Char) |Int) |Int)
E:iff (== (Var rd_char |Int) (Num 10 |Char) |Int)
E:exp (++ (Var rd_line |Int) |Int)
E:exp (Call (Fn cg_line |Void) [] |Void)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:iff (< (Var rd_char |Int) (Num 0 |Int) |Int)
E:ret (Num 1 |Int)
E:iff (&& (>= (Var rd_char |Int) (Num 48 |Char) |Int) (<= (Var rd_char |Int) (Num 57 |Char) |Int) |Int)
E:var (- (Var rd_char |Int) (Num 48 |Char) |Int)
E:iff (== (Var v |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:fr2 (&& (>= (Var rd_char |Int) (Num 48 |Char) |Int) (<= (Var rd_char |Int) (Num 55 |Char) |Int) |Int)
E:fr3 [(Call (Fn rd_next |Void) [] |Void)]
E:exp (= (Var v |Int) (- (+ (* (Num 8 |Int) (Var v |Int) |Int) (Var rd_char |Int) |Int) (Num 48 |Char) |Int) |Int)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:fr2 (&& (>= (Var rd_char |Int) (Num 48 |Char) |Int) (<= (Var rd_char |Int) (Num 57 |Char) |Int) |Int)
E:fr3 [(Call (Fn rd_next |Void) [] |Void)]
E:exp (= (Var v |Int) (- (+ (* (Num 10 |Int) (Var v |Int) |Int) (Var rd_char |Int) |Int) (Num 48 |Char) |Int) |Int)
E:exp (= (Var sc_num |Int) (Var v |Int) |Int)
E:ret (Num 2 |Int)
E:iff (Call (Fn is_abc |Int) [(Var rd_char |Int)] |Int)
E:var (Var sc_text |Char*)
E:whl (|| (Call (Fn is_abc |Int) [(Var rd_char |Int)] |Int) (&& (>= (Var rd_char |Int) (Num 48 |Char) |Int) (<= (Var rd_char |Int) (Num 57 |Char) |Int) |Int) |Int)
E:exp (= (@ (Var p |Char*) |Char) (Var rd_char |Int) |Int)
E:exp (++ (Var p |Char*) |Char*)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:exp (= (@ (Var p |Char*) |Char) (Num 0 |Int) |Int)
E:var (Call (Fn find_kw |Int) [(Var sc_text |Char*)] |Int)
E:iff (>= (Var k |Int) (Num 0 |Int) |Int)
E:ret (+ (Num 128 |Int) (Var k |Int) |Int)
E:exp (= (Var sc_num |Int) (Call (Fn id_index |Int) [(Var sc_text |Char*)] |Int) |Int)
E:ret (Num 5 |Int)
E:iff (== (Var rd_char |Int) (Num 34 |Char) |Int)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:var (Var sc_text |Char*)
E:whl (!= (Var rd_char |Int) (Num 34 |Char) |Int)
E:iff (== (Var rd_char |Int) (Num 92 |Char) |Int)
E:exp (Call (Fn sc_do_backslash |Void) [] |Void)
E:exp (= (@ (Var p |Char*) |Char) (Var rd_char |Int) |Int)
E:exp (++ (Var p |Char*) |Char*)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:exp (= (@ (Var p |Char*) |Char) (Num 0 |Int) |Int)
E:exp (= (Var sc_num |Int) (Call (Fn sl_add |Int) [(Var sc_text |Char*)] |Int) |Int)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:ret (Num 4 |Int)
E:iff (== (Var rd_char |Int) (Num 39 |Char) |Int)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:iff (== (Var rd_char |Int) (Num 92 |Char) |Int)
E:exp (Call (Fn sc_do_backslash |Void) [] |Void)
E:exp (= (Var sc_num |Int) (Var rd_char |Int) |Int)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:iff (!= (Var rd_char |Int) (Num 39 |Char) |Int)
E:ret (Num 0 |Int)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:ret (Num 3 |Int)
E:iff (Call (Fn memchr |Char*) [(Str "(){}[],;*%^~" |Char*) (Var rd_char |Int) (Num 12 |Int)] |Char*)
E:var (Var rd_char |Int)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:ret (Var c |Int)
E:iff (|| (|| (|| (== (Var rd_char |Int) (Num 61 |Char) |Int) (== (Var rd_char |Int) (Num 60 |Char) |Int) |Int) (== (Var rd_char |Int) (Num 62 |Char) |Int) |Int) (== (Var rd_char |Int) (Num 33 |Char) |Int) |Int)
E:var (Var rd_char |Int)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:iff (== (Var rd_char |Int) (Num 61 |Char) |Int)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:iff (== (Var c |Int) (Num 61 |Char) |Int)
E:exp (= (Var c |Int) (Num 101 |Char) |Int)
E:iff (== (Var c |Int) (Num 60 |Char) |Int)
E:exp (= (Var c |Int) (Num 108 |Char) |Int)
E:iff (== (Var c |Int) (Num 62 |Char) |Int)
E:exp (= (Var c |Int) (Num 103 |Char) |Int)
E:exp (= (Var c |Int) (Num 110 |Char) |Int)
E:ret (Var c |Int)
E:iff (|| (== (Var rd_char |Int) (Num 43 |Char) |Int) (== (Var rd_char |Int) (Num 45 |Char) |Int) |Int)
E:var (Var rd_char |Int)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:iff (== (Var rd_char |Int) (Var c |Int) |Int)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:iff (== (Var c |Int) (Num 43 |Char) |Int)
E:exp (= (Var c |Int) (Num 105 |Char) |Int)
E:exp (= (Var c |Int) (Num 100 |Char) |Int)
E:ret (Var c |Int)
E:iff (|| (== (Var rd_char |Int) (Num 38 |Char) |Int) (== (Var rd_char |Int) (Num 124 |Char) |Int) |Int)
E:var (Var rd_char |Int)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:iff (== (Var rd_char |Int) (Var c |Int) |Int)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:iff (== (Var c |Int) (Num 38 |Char) |Int)
E:exp (= (Var c |Int) (Num 97 |Char) |Int)
E:exp (= (Var c |Int) (Num 111 |Char) |Int)
E:ret (Var c |Int)
E:iff (== (Var rd_char |Int) (Num 35 |Char) |Int)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:whl (&& (!= (Var rd_char |Int) (Num 10 |Char) |Int) (> (Var rd_char |Int) (Num 0 |Int) |Int) |Int)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:iff (== (Var rd_char |Int) (Num 10 |Char) |Int)
E:exp (++ (Var rd_line |Int) |Int)
E:exp (Call (Fn cg_line |Void) [] |Void)
E:iff (> (Var rd_char |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:ret (Call (Fn sc_read_next |Int) [] |Int)
E:iff (== (Var rd_char |Int) (Num 47 |Char) |Int)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:iff (== (Var rd_char |Int) (Num 47 |Char) |Int)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:whl (&& (!= (Var rd_char |Int) (Num 10 |Char) |Int) (> (Var rd_char |Int) (Num 0 |Int) |Int) |Int)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:iff (== (Var rd_char |Int) (Num 10 |Char) |Int)
E:exp (++ (Var rd_line |Int) |Int)
E:exp (Call (Fn cg_line |Void) [] |Void)
E:iff (> (Var rd_char |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:ret (Call (Fn sc_read_next |Int) [] |Int)
E:iff (== (Var rd_char |Int) (Num 42 |Char) |Int)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:iff (== (Var rd_char |Int) (Num 10 |Char) |Int)
E:exp (++ (Var rd_line |Int) |Int)
E:exp (Call (Fn cg_line |Void) [] |Void)
E:whl (Num 1 |Int)
E:whl (&& (!= (Var rd_char |Int) (Num 42 |Char) |Int) (> (Var rd_char |Int) (Num 0 |Int) |Int) |Int)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:iff (== (Var rd_char |Int) (Num 10 |Char) |Int)
E:exp (++ (Var rd_line |Int) |Int)
E:exp (Call (Fn cg_line |Void) [] |Void)
E:iff (> (Var rd_char |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:iff (== (Var rd_char |Int) (Num 47 |Char) |Int)
E:iff (> (Var rd_char |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn rd_next |Void) [] |Void)
E:ret (Call (Fn sc_read_next |Int) [] |Int)
E:ret (Num 47 |Char)
E:exp (= (@ (+ (Var sc_text |Char*) (Num 0 |Int) |Char*) |Char) (Var rd_char |Int) |Int)
E:exp (= (@ (+ (Var sc_text |Char*) (Num 1 |Int) |Char*) |Char) (Num 0 |Int) |Int)
E:ret (Num 0 |Int)
E:exp (= (Var sc_tkn |Int) (Call (Fn sc_read_next |Int) [] |Int) |Int)
E:exp (++ (Var sc_n_tokens |Int) |Int)
E:iff (Var SC_DEBUG |Int)
E:iff (!= (Var rd_line |Int) (Var sc_prev_line |Int) |Int)
E:exp (Call (Fn p0n |Void) [] |Void)
E:exp (= (Var sc_prev_line |Int) (Var rd_line |Int) |Int)
E:exp (Call (Fn p2 |Void) [(Call (Fn i2s |Char*) [(Var rd_line |Int)] |Char*) (Str "| " |Char*)] |Void)
E:exp (Call (Fn p2 |Void) [(Call (Fn i2s |Char*) [(Var sc_tkn |Int)] |Char*) (Str " - " |Char*)] |Void)
E:iff (>= (Var sc_tkn |Int) (Num 128 |Int) |Int)
E:exp (Call (Fn p2 |Void) [(Str "kw " |Char*) (@ (+ (Var KWDS |Char**) (- (Var sc_tkn |Int) (Num 128 |Int) |Int) |Char**) |Char*)] |Void)
E:iff (== (Var sc_tkn |Int) (Num 5 |Int) |Int)
E:exp (Call (Fn p4 |Void) [(Str "id " |Char*) (@ (+ (Var id_table |Char**) (Var sc_num |Int) |Char**) |Char*) (Str " #" |Char*) (Call (Fn i2s |Char*) [(Var sc_num |Int)] |Char*)] |Void)
E:iff (== (Var sc_tkn |Int) (Num 4 |Int) |Int)
E:exp (Call (Fn p2 |Void) [(Str "str " |Char*) (Call (Fn str_repr |Char*) [(@ (+ (Var sl_table |Char**) (Var sc_num |Int) |Char**) |Char*)] |Char*)] |Void)
E:iff (== (Var sc_tkn |Int) (Num 2 |Int) |Int)
E:exp (Call (Fn p2 |Void) [(Str "num " |Char*) (Call (Fn i2s |Char*) [(Var sc_num |Int)] |Char*)] |Void)
E:iff (== (Var sc_tkn |Int) (Num 3 |Int) |Int)
E:exp (Call (Fn p2 |Void) [(Str "chr " |Char*) (Call (Fn i2s |Char*) [(Var sc_num |Int)] |Char*)] |Void)
E:iff (== (Var sc_tkn |Int) (Num 1 |Int) |Int)
E:exp (Call (Fn p1 |Void) [(Str "eof\n" |Char*)] |Void)
E:iff (== (Var sc_tkn |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn p2 |Void) [(Str "err" |Char*) (Var sc_text |Char*)] |Void)
E:iff (< (Var sc_tkn |Int) (Num 128 |Int) |Int)
E:exp (= (@ (+ (Var o |Char*) (Num 0 |Int) |Char*) |Char) (Var sc_tkn |Int) |Int)
E:exp (= (@ (+ (Var o |Char*) (Num 1 |Int) |Char*) |Char) (Num 0 |Char) |Char)
E:exp (Call (Fn p2 |Void) [(Str "op/sep " |Char*) (Var o |Char*)] |Void)
E:exp (Call (Fn p2 |Void) [(Str "???" |Char*) (Var sc_text |Char*)] |Void)
E:exp (Call (Fn p0n |Void) [] |Void)
E:ret (|| (== (Var t |Int) (Num 1 |Int) |Int) (== (Var t |Int) (Num 4 |Int) |Int) |Int)
E:ret (|| (|| (|| (== (Var t |Int) (Num 2 |Int) |Int) (== (Var t |Int) (Num 3 |Int) |Int) |Int) (== (Var t |Int) (Num 5 |Int) |Int) |Int) (== (Var t |Int) (Num 6 |Int) |Int) |Int)
E:ret (|| (|| (== (Var t |Int) (Num 3 |Int) |Int) (== (Var t |Int) (Num 5 |Int) |Int) |Int) (== (Var t |Int) (Num 6 |Int) |Int) |Int)
E:exp (= (Var st_id |Int*) (Cast Int* (Call (Fn malloc |Char*) [(* (Num 4 |Int) (Var n |Int) |Int)] |Char*) |Int*) |Int*)
E:exp (= (Var st_type |Char*) (Call (Fn malloc |Char*) [(Var n |Int)] |Char*) |Char*)
E:exp (= (Var st_kind |Char*) (Call (Fn malloc |Char*) [(Var n |Int)] |Char*) |Char*)
E:exp (= (Var st_value |Int*) (Cast Int* (Call (Fn malloc |Char*) [(* (Num 4 |Int) (Var n |Int) |Int)] |Char*) |Int*) |Int*)
E:exp (= (Var st_prop |Int*) (Cast Int* (Call (Fn malloc |Char*) [(* (Num 4 |Int) (Var n |Int) |Int)] |Char*) |Int*) |Int*)
E:exp (= (Var st_dim |Int) (Var n |Int) |Int)
E:exp (= (Var st_count |Int) (Num 0 |Int) |Int)
E:var (Call (Fn malloc |Char*) [(+ (Var nargs |Int) (Num 1 |Int) |Int)] |Char*)
E:var (Num 0 |Int)
E:fr2 (< (Var i |Int) (Var nargs |Int) |Int)
E:fr3 [(++ (Var i |Int) |Int)]
E:exp (Call (Fn assert |Void) [(&& (< (Var start |Int) (Var st_count |Int) |Int) (== (@ (+ (Var st_kind |Char*) (+ (Var start |Int) (Var i |Int) |Int) |Char*) |Char) (Num 3 |Int) |Int) |Int) (Str "st_copy" |Char*)] |Void)
E:exp (= (@ (+ (Var args |Char*) (Var i |Int) |Char*) |Char) (@ (+ (Var st_type |Char*) (+ (Var start |Int) (Var i |Int) |Int) |Char*) |Char) |Char)
E:exp (= (@ (+ (Var args |Char*) (Var nargs |Int) |Char*) |Char) (Num 0 |Int) |Int)
E:ret (Var args |Char*)
E:var (- (Var st_count |Int) (Num 1 |Int) |Int)
E:fr2 (>= (Var i |Int) (Num 0 |Int) |Int)
E:fr3 [(-- (Var i |Int) |Int)]
E:iff (== (@ (+ (Var st_id |Int*) (Var i |Int) |Int*) |Int) (Var id |Int) |Int)
E:ret (Var i |Int)
E:ret (Neg (Num 1 |Int) |Int)
E:var (Var st_count |Int)
E:iff (>= (Var k |Int) (Var st_dim |Int) |Int)
E:exp (Call (Fn err1 |Void) [(Str "too many identifiers" |Char*)] |Void)
E:exp (= (@ (+ (Var st_id |Int*) (Var k |Int) |Int*) |Int) (Var id |Int) |Int)
E:exp (= (@ (+ (Var st_type |Char*) (Var k |Int) |Char*) |Char) (Var type |Int) |Int)
E:exp (= (@ (+ (Var st_kind |Char*) (Var k |Int) |Char*) |Char) (Var kind |Int) |Int)
E:exp (= (@ (+ (Var st_value |Int*) (Var k |Int) |Int*) |Int) (Var value |Int) |Int)
E:exp (= (@ (+ (Var st_prop |Int*) (Var k |Int) |Int*) |Int) (Var aux |Int) |Int)
E:exp (++ (Var st_count |Int) |Int)
E:ret (Var k |Int)
E:var (Num 0 |Int)
E:var (Var st_local |Int)
E:fr2 (< (Var i |Int) (Var st_count |Int) |Int)
E:fr3 [(++ (Var i |Int) |Int)]
E:iff (== (@ (+ (Var st_kind |Char*) (Var i |Int) |Char*) |Char) (Num 1 |Int) |Int)
E:exp (= (Var words |Int) (Num 1 |Int) |Int)
E:iff (== (@ (+ (Var st_kind |Char*) (Var i |Int) |Char*) |Char) (Num 2 |Int) |Int)
E:iff (== (@ (+ (Var st_type |Char*) (Var i |Int) |Char*) |Char) (Num 1 |Int) |Int)
E:exp (= (Var words |Int) (/ (+ (@ (+ (Var st_prop |Int*) (Var i |Int) |Int*) |Int) (Num 3 |Int) |Int) (Num 4 |Int) |Int) |Int)
E:exp (= (Var words |Int) (@ (+ (Var st_prop |Int*) (Var i |Int) |Int*) |Int) |Int)
E:exp (Call (Fn assert |Void) [(== (@ (+ (Var st_kind |Char*) (Var i |Int) |Char*) |Char) (Num 3 |Int) |Int) (Str "K_arg" |Char*)] |Void)
E:exp (= (Var words |Int) (Num 0 |Int) |Int)
E:exp (= (Var s |Int) (+ (Var s |Int) (* (Num 4 |Int) (Var words |Int) |Int) |Int) |Int)
E:ret (Var s |Int)
E:iff (== (@ (Var a |Char*) |Char) (Num 0 |Int) |Int)
E:exp (Call (Fn p1 |Void) [(Str " ()" |Char*)] |Void)
E:fr2 (@ (Var a |Char*) |Char)
E:fr3 [(++ (Var a |Char*) |Char*)]
E:exp (Call (Fn p2 |Void) [(Str " " |Char*) (@ (+ (Var st_type_str |Char**) (@ (Var a |Char*) |Char) |Char**) |Char*)] |Void)
E:var (Num 0 |Int)
E:var (Var start |Int)
E:fr2 (< (Var i |Int) (Var st_count |Int) |Int)
E:fr3 [(++ (Var i |Int) |Int)]
E:var (@ (+ (Var st_kind |Char*) (Var i |Int) |Char*) |Char)
E:var (Var k |Int)
E:iff (== (Var kk |Int) (Num 2 |Int) |Int)
E:exp (= (Var kk |Int) (Num 1 |Int) |Int)
E:iff (|| (== (Var kind |Int) (Neg (Num 1 |Int) |Int) |Int) (== (Var kind |Int) (Var kk |Int) |Int) |Int)
E:exp (++ (Var cnt |Int) |Int)
E:exp (Call (Fn p3 |Void) [(Call (Fn i2s |Char*) [(Var i |Int)] |Char*) (Str " - " |Char*) (@ (+ (Var id_table |Char**) (@ (+ (Var st_id |Int*) (Var i |Int) |Int*) |Int) |Char**) |Char*)] |Void)
E:exp (Call (Fn p3 |Void) [(Str " (" |Char*) (Call (Fn i2s |Char*) [(@ (+ (Var st_id |Int*) (Var i |Int) |Int*) |Int)] |Char*) (Str ") " |Char*)] |Void)
E:exp (Call (Fn p3 |Void) [(@ (+ (Var st_type_str |Char**) (@ (+ (Var st_type |Char*) (Var i |Int) |Char*) |Char) |Char**) |Char*) (Str " " |Char*) (@ (+ (Var st_kind_str |Char**) (Var k |Int) |Char**) |Char*)] |Void)
E:exp (Call (Fn p2 |Void) [(Str " v=" |Char*) (Call (Fn i2s |Char*) [(@ (+ (Var st_value |Int*) (Var i |Int) |Int*) |Int)] |Char*)] |Void)
E:iff (== (Var k |Int) (Num 2 |Int) |Int)
E:exp (Call (Fn p2 |Void) [(Str " dim: " |Char*) (Call (Fn i2s |Char*) [(@ (+ (Var st_prop |Int*) (Var i |Int) |Int*) |Int)] |Char*)] |Void)
E:iff (== (Var k |Int) (Num 4 |Int) |Int)
E:exp (Call (Fn p1 |Void) [(Str " args:" |Char*)] |Void)
E:exp (Call (Fn print_args |Void) [(Cast Char* (@ (+ (Var st_prop |Int*) (Var i |Int) |Int*) |Int) |Char*)] |Void)
E:exp (Call (Fn p0n |Void) [] |Void)
E:ret (Var cnt |Int)
E:var (Cast Int* (Call (Fn malloc |Char*) [(* (+ (Num 4 |Int) (/ (- (+ (Var n |Int) (Num 4 |Int) |Int) (Num 1 |Int) |Int) (Num 4 |Int) |Int) |Int) (Num 4 |Int) |Int)] |Char*) |Int*)
E:exp (= (@ (+ (Var a |Int*) (Num 0 |Int) |Int*) |Int) (Cast Int (Var a |Int*) |Int) |Int)
E:exp (= (@ (+ (Var a |Int*) (Num 2 |Int) |Int*) |Int) (Var n |Int) |Int)
E:exp (= (@ (+ (Var a |Int*) (Num 1 |Int) |Int*) |Int) (Num 0 |Int) |Int)
E:exp (= (@ (+ (Var a |Int*) (Num 3 |Int) |Int*) |Int) (Num 0 |Int) |Int)
E:ret (Var a |Int*)
E:var (Cast Int* (@ (+ (Var bf |Int*) (Num 0 |Int) |Int*) |Int) |Int*)
E:var (- (@ (+ (Var bf |Int*) (Num 2 |Int) |Int*) |Int) (@ (+ (Var last |Int*) (Num 3 |Int) |Int*) |Int) |Int)
E:whl (< (Var left |Int) (Var n |Int) |Int)
E:exp (Call (Fn memcopy |Void) [(+ (Cast Char* (+ (Var last |Int*) (Num 4 |Int) |Int*) |Char*) (@ (+ (Var last |Int*) (Num 3 |Int) |Int*) |Int) |Char*) (Var s |Char*) (Var left |Int)] |Void)
E:exp (= (@ (+ (Var last |Int*) (Num 3 |Int) |Int*) |Int) (+ (@ (+ (Var last |Int*) (Num 3 |Int) |Int*) |Int) (Var left |Int) |Int) |Int)
E:var (Call (Fn bf_alloc_min |Int*) [(@ (+ (Var bf |Int*) (Num 2 |Int) |Int*) |Int)] |Int*)
E:exp (= (@ (+ (Var bf |Int*) (Num 0 |Int) |Int*) |Int) (Cast Int (Var new_bf |Int*) |Int) |Int)
E:exp (= (@ (+ (Var last |Int*) (Num 1 |Int) |Int*) |Int) (Cast Int (Var new_bf |Int*) |Int) |Int)
E:exp (= (Var s |Char*) (+ (Var s |Char*) (Var left |Int) |Char*) |Char*)
E:exp (= (Var n |Int) (- (Var n |Int) (Var left |Int) |Int) |Int)
E:exp (= (Var last |Int*) (Var new_bf |Int*) |Int*)
E:exp (= (Var left |Int) (@ (+ (Var bf |Int*) (Num 2 |Int) |Int*) |Int) |Int)
E:exp (Call (Fn memcopy |Void) [(+ (Cast Char* (+ (Var last |Int*) (Num 4 |Int) |Int*) |Char*) (@ (+ (Var last |Int*) (Num 3 |Int) |Int*) |Int) |Char*) (Var s |Char*) (Var n |Int)] |Void)
E:exp (= (@ (+ (Var last |Int*) (Num 3 |Int) |Int*) |Int) (+ (@ (+ (Var last |Int*) (Num 3 |Int) |Int*) |Int) (Var n |Int) |Int) |Int)
E:whl (Var bf |Int*)
E:exp (Call (Fn write |Int) [(Var fd |Int) (Cast Char* (+ (Var bf |Int*) (Num 4 |Int) |Int*) |Char*) (@ (+ (Var bf |Int*) (Num 3 |Int) |Int*) |Int)] |Int)
E:exp (= (Var bf |Int*) (Cast Int* (@ (+ (Var bf |Int*) (Num 1 |Int) |Int*) |Int) |Int*) |Int*)
E:var (Cast Int* (@ (+ (Var bf |Int*) (Num 1 |Int) |Int*) |Int) |Int*)
E:exp (Call (Fn free |Void) [(Cast Char* (Var bf |Int*) |Char*)] |Void)
E:whl (!= (Var next |Int*) (Num 0 |Int) |Int)
E:exp (= (Var bf |Int*) (Var next |Int*) |Int*)
E:exp (= (Var next |Int*) (Cast Int* (@ (+ (Var bf |Int*) (Num 1 |Int) |Int*) |Int) |Int*) |Int*)
E:exp (Call (Fn free |Void) [(Cast Char* (Var bf |Int*) |Char*)] |Void)
E:var (Cast Int* (Call (Fn malloc |Char*) [(* (Num 2 |Int) (Num 4 |Int) |Int)] |Char*) |Int*)
E:exp (= (@ (+ (Var r |Int*) (Num 0 |Int) |Int*) |Int) (+ (Var tag |Int) (* (Var type |Int) (Num 256 |Int) |Int) |Int) |Int)
E:exp (= (@ (+ (Var r |Int*) (Num 1 |Int) |Int*) |Int) (Cast Int (Var expr |Int*) |Int) |Int)
E:ret (Var r |Int*)
E:var (Cast Int* (Call (Fn malloc |Char*) [(* (Num 3 |Int) (Num 4 |Int) |Int)] |Char*) |Int*)
E:exp (= (@ (+ (Var r |Int*) (Num 0 |Int) |Int*) |Int) (+ (Var tag |Int) (* (Var type |Int) (Num 256 |Int) |Int) |Int) |Int)
E:exp (= (@ (+ (Var r |Int*) (Num 1 |Int) |Int*) |Int) (Cast Int (Var expr1 |Int*) |Int) |Int)
E:exp (= (@ (+ (Var r |Int*) (Num 2 |Int) |Int*) |Int) (Cast Int (Var expr2 |Int*) |Int) |Int)
E:ret (Var r |Int*)
E:ret (Call (Fn ET_1 |Int*) [(Var tag |Int) (Cast Int* (Var value |Int) |Int*) (Var type |Int)] |Int*)
E:ret (Call (Fn ET_1 |Int*) [(Cast Int (Var e |Int*) |Int) (Num 0 |Int) (Num 0 |Int)] |Int*)
E:var (& (@ (+ (Var e |Int*) (Num 0 |Int) |Int*) |Int) (Num 255 |Int) |Int)
E:var (/ (@ (+ (Var e |Int*) (Num 0 |Int) |Int*) |Int) (Num 256 |Int) |Int)
E:iff (< (Var e0 |Int) (Num 32 |Char) |Int)
E:exp (Call (Fn p3 |Void) [(Str "(" |Char*) (@ (+ (Var ET_TAG |Char**) (Var e0 |Int) |Char**) |Char*) (Str " " |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 105 |Char) |Int)
E:exp (Call (Fn p1 |Void) [(Str "(++ " |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 100 |Char) |Int)
E:exp (Call (Fn p1 |Void) [(Str "(-- " |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 97 |Char) |Int)
E:exp (Call (Fn p1 |Void) [(Str "(&& " |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 111 |Char) |Int)
E:exp (Call (Fn p1 |Void) [(Str "(|| " |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 101 |Char) |Int)
E:exp (Call (Fn p1 |Void) [(Str "(== " |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 110 |Char) |Int)
E:exp (Call (Fn p1 |Void) [(Str "(!= " |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 108 |Char) |Int)
E:exp (Call (Fn p1 |Void) [(Str "(<= " |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 103 |Char) |Int)
E:exp (Call (Fn p1 |Void) [(Str "(>= " |Char*)] |Void)
E:exp (= (@ (+ (Var s |Char*) (Num 0 |Int) |Char*) |Char) (Cast Char (Var e0 |Int) |Char) |Char)
E:exp (= (@ (+ (Var s |Char*) (Num 1 |Int) |Char*) |Char) (Num 0 |Char) |Char)
E:exp (Call (Fn p3 |Void) [(Str "(" |Char*) (Var s |Char*) (Str " " |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 1 |Int) |Int)
E:exp (Call (Fn p1 |Void) [(Call (Fn i2s |Char*) [(@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int)] |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 2 |Int) |Int)
E:exp (Call (Fn p1 |Void) [(Call (Fn str_repr |Char*) [(@ (+ (Var sl_table |Char**) (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Char**) |Char*)] |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 4 |Int) |Int)
E:exp (Call (Fn p1 |Void) [(@ (+ (Var id_table |Char**) (@ (+ (Var st_id |Int*) (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*) |Int) |Char**) |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 3 |Int) |Int)
E:exp (Call (Fn p1 |Void) [(@ (+ (Var id_table |Char**) (@ (+ (Var st_id |Int*) (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*) |Int) |Char**) |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 5 |Int) |Int)
E:exp (Call (Fn et_print |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*)] |Void)
E:exp (Call (Fn p1 |Void) [(Str " [" |Char*)] |Void)
E:var (Num 0 |Int)
E:var (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int)
E:fr2 (Var x |Int)
E:fr3 [(++ (Var n |Int) |Int) (= (Var x |Int) (@ (+ (Cast Int* (Var x |Int) |Int*) (Num 1 |Int) |Int*) |Int) |Int)]
E:iff (> (Var n |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn p1 |Void) [(Str " " |Char*)] |Void)
E:exp (Call (Fn et_print |Void) [(Cast Int* (@ (+ (Cast Int* (Var x |Int) |Int*) (Num 0 |Int) |Int*) |Int) |Int*)] |Void)
E:exp (Call (Fn p1 |Void) [(Str "]" |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 6 |Int) |Int)
E:exp (Call (Fn p1 |Void) [(@ (+ (Var st_type_str |Char**) (Var e0type |Int) |Char**) |Char*)] |Void)
E:exp (Call (Fn p1 |Void) [(Str " " |Char*)] |Void)
E:exp (Call (Fn et_print |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*)] |Void)
E:iff (== (Var e0 |Int) (Num 7 |Int) |Int)
E:exp (Call (Fn et_print |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*)] |Void)
E:iff (== (Var e0 |Int) (Num 8 |Int) |Int)
E:exp (Call (Fn et_print |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*)] |Void)
E:iff (|| (|| (|| (== (Var e0 |Int) (Num 105 |Char) |Int) (== (Var e0 |Int) (Num 100 |Char) |Int) |Int) (== (Var e0 |Int) (Num 126 |Char) |Int) |Int) (== (Var e0 |Int) (Num 33 |Char) |Int) |Int)
E:exp (Call (Fn et_print |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*)] |Void)
E:exp (Call (Fn et_print |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*)] |Void)
E:exp (Call (Fn p1 |Void) [(Str " " |Char*)] |Void)
E:exp (Call (Fn et_print |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int) |Int*)] |Void)
E:exp (Call (Fn p3 |Void) [(Str " |" |Char*) (@ (+ (Var st_type_str |Char**) (Var e0type |Int) |Char**) |Char*) (Str ")" |Char*)] |Void)
E:var (Num 0 |Int)
E:fr2 (Var x |Int**)
E:fr3 [(++ (Var n |Int) |Int) (= (Var x |Int**) (Cast Int** (@ (+ (Var x |Int**) (Num 1 |Int) |Int**) |Int*) |Int**) |Int**)]
E:iff (> (Var n |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn p1 |Void) [(Str " " |Char*)] |Void)
E:exp (Call (Fn et_print |Void) [(@ (+ (Var x |Int**) (Num 0 |Int) |Int**) |Int*)] |Void)
E:exp (Call (Fn p1n |Void) [(Str "]" |Char*)] |Void)
E:ret (++ (Var cg_label |Int) |Int)
E:exp (= (@ (+ (Var cg_loop_label |Int*) (Var cg_loop_level |Int) |Int*) |Int) (++ (Var cg_label |Int) |Int) |Int)
E:exp (++ (Var cg_loop_level |Int) |Int)
E:ret (Var cg_label |Int)
E:iff (<= (Var cg_loop_level |Int) (Num 0 |Int) |Int)
E:ret (Neg (Num 1 |Int) |Int)
E:ret (@ (+ (Var cg_loop_label |Int*) (- (Var cg_loop_level |Int) (Num 1 |Int) |Int) |Int*) |Int)
E:exp (-- (Var cg_loop_level |Int) |Int)
E:var (Call (Fn strlen |Int) [(Var s |Char*)] |Int)
E:iff (== (Var cg_buffer |Int*) (Num 0 |Int) |Int)
E:exp (Call (Fn write |Int) [(Var cg_file |Int) (Var s |Char*) (Var n |Int)] |Int)
E:exp (Call (Fn bf_append |Void) [(Var cg_buffer |Int*) (Var s |Char*) (Var n |Int)] |Void)
E:var (Call (Fn strlen |Int) [(Var s |Char*)] |Int)
E:iff (== (Var cg_buffer |Int*) (Num 0 |Int) |Int)
E:exp (Call (Fn write |Int) [(Var cg_file |Int) (Var s |Char*) (Var n |Int)] |Int)
E:exp (Call (Fn write |Int) [(Var cg_file |Int) (Str "\n" |Char*) (Num 1 |Int)] |Int)
E:exp (Call (Fn bf_append |Void) [(Var cg_buffer |Int*) (Var s |Char*) (Var n |Int)] |Void)
E:exp (Call (Fn bf_append |Void) [(Var cg_buffer |Int*) (Str "\n" |Char*) (Num 1 |Int)] |Void)
E:exp (Call (Fn cg_o |Void) [(Var s |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Var t |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Var s |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Var t |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Var s |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Var t |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Var u |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Var s |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Var t |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Var u |Char*)] |Void)
E:iff (Var CG_LINES |Int)
E:exp (Call (Fn cg_2n |Void) [(Str "  # " |Char*) (Call (Fn i2s |Char*) [(Var rd_line |Int)] |Char*)] |Void)
E:exp (Call (Fn assert |Void) [(== (Var cg_buffer |Int*) (Num 0 |Int) |Int) (Str "int error: already suspended!" |Char*)] |Void)
E:exp (= (Var cg_buffer |Int*) (Call (Fn bf_alloc_min |Int*) [(Num 4000 |Int)] |Int*) |Int*)
E:exp (Call (Fn assert |Void) [(!= (Var cg_buffer |Int*) (Num 0 |Int) |Int) (Str "int error: was not suspended!" |Char*)] |Void)
E:exp (Call (Fn write |Int) [(Var cg_file |Int) (Var s |Char*) (Call (Fn strlen |Int) [(Var s |Char*)] |Int)] |Int)
E:exp (Call (Fn bf_write |Void) [(Var cg_buffer |Int*) (Var cg_file |Int)] |Void)
E:exp (Call (Fn bf_free |Void) [(Var cg_buffer |Int*)] |Void)
E:exp (= (Var cg_buffer |Int*) (Num 0 |Int) |Int*)
E:exp (Call (Fn cg_3n |Void) [(Str "  .file "" |Char*) (Var fn |Char*) (Str """ |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  .intel_syntax noprefix\n" |Char*)] |Void)
E:exp (Call (Fn cg_3n |Void) [(Str "\n  .ident  "" |Char*) (Var TITLE |Char*) (Str ""\n" |Char*)] |Void)
E:var (Num 0 |Int)
E:fr2 (< (Var i |Int) (Var st_count |Int) |Int)
E:fr3 [(++ (Var i |Int) |Int)]
E:iff (&& (== (@ (+ (Var st_kind |Char*) (Var i |Int) |Char*) |Char) (Num 4 |Int) |Int) (== (@ (+ (Var st_value |Int*) (Var i |Int) |Int*) |Int) (Num 0 |Int) |Int) |Int)
E:exp (Call (Fn cg_3n |Void) [(Str "  .def _" |Char*) (@ (+ (Var id_table |Char**) (@ (+ (Var st_id |Int*) (Var i |Int) |Int*) |Int) |Char**) |Char*) (Str "; .scl 2; .type 32; .endef" |Char*)] |Void)
E:iff (Call (Fn strequ |Int) [(Var name |Char*) (Str "main" |Char*)] |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  .def ___main; .scl 2; .type 32; .endef" |Char*)] |Void)
E:iff (!= (Var cg_section |Int) (Num 1 |Int) |Int)
E:exp (= (Var cg_section |Int) (Num 1 |Int) |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  .text" |Char*)] |Void)
E:exp (Call (Fn cg_2n |Void) [(Str "  .globl _" |Char*) (Var name |Char*)] |Void)
E:exp (Call (Fn cg_3n |Void) [(Str "  .def _" |Char*) (Var name |Char*) (Str "; .scl 2; .type 32; .endef" |Char*)] |Void)
E:exp (Call (Fn cg_3n |Void) [(Str "_" |Char*) (Var name |Char*) (Str ":" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  .cfi_startproc" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  push ebp" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  .cfi_def_cfa_offset 8\n  .cfi_offset 5,-8" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  mov ebp,esp" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  .cfi_def_cfa_register 5" |Char*)] |Void)
E:iff (Var ret0 |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  xor eax,eax" |Char*)] |Void)
E:exp (Call (Fn cg_3n |Void) [(Str "R" |Char*) (Call (Fn i2s |Char*) [(Var cg_fn_label |Int)] |Char*) (Str ":" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  leave" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  .cfi_restore 5\n  .cfi_def_cfa 4,4" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  ret" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  .cfi_endproc\n" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Var str |Char*)] |Void)
E:iff (&& (>= (Var next |Int) (Num 48 |Char) |Int) (<= (Var next |Int) (Num 57 |Char) |Int) |Int)
E:exp (Call (Fn cg_o |Void) [(Str ""\n  .ascii "" |Char*)] |Void)
E:exp (= (@ (+ (Var c |Char*) (Num 1 |Int) |Char*) |Char) (Num 0 |Char) |Char)
E:exp (Call (Fn cg_o |Void) [(Str "  .ascii "" |Char*)] |Void)
E:var (@ (+ (Var sl_table |Char**) (Var i |Int) |Char**) |Char*)
E:fr2 (@ (Var s |Char*) |Char)
E:fr3 [(++ (Var s |Char*) |Char*)]
E:iff (== (@ (Var s |Char*) |Char) (Num 10 |Char) |Int)
E:exp (Call (Fn cg_spec_and_nl |Void) [(Str "\12" |Char*) (@ (+ (Var s |Char*) (Num 1 |Int) |Char*) |Char)] |Void)
E:iff (== (@ (Var s |Char*) |Char) (Num 92 |Char) |Int)
E:exp (Call (Fn cg_spec_and_nl |Void) [(Str "\134" |Char*) (@ (+ (Var s |Char*) (Num 1 |Int) |Char*) |Char)] |Void)
E:iff (== (@ (Var s |Char*) |Char) (Num 13 |Char) |Int)
E:exp (Call (Fn cg_spec_and_nl |Void) [(Str "\15" |Char*) (@ (+ (Var s |Char*) (Num 1 |Int) |Char*) |Char)] |Void)
E:iff (== (@ (Var s |Char*) |Char) (Num 8 |Char) |Int)
E:exp (Call (Fn cg_spec_and_nl |Void) [(Str "\10" |Char*) (@ (+ (Var s |Char*) (Num 1 |Int) |Char*) |Char)] |Void)
E:iff (== (@ (Var s |Char*) |Char) (Num 34 |Char) |Int)
E:exp (Call (Fn cg_spec_and_nl |Void) [(Str "\42" |Char*) (@ (+ (Var s |Char*) (Num 1 |Int) |Char*) |Char)] |Void)
E:exp (= (@ (+ (Var c |Char*) (Num 0 |Int) |Char*) |Char) (@ (Var s |Char*) |Char) |Char)
E:exp (Call (Fn cg_o |Void) [(Var c |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "\0"" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  .section .rdata,"dr"" |Char*)] |Void)
E:var (Num 0 |Int)
E:fr2 (< (Var i |Int) (Var sl_count |Int) |Int)
E:fr3 [(++ (Var i |Int) |Int)]
E:exp (Call (Fn cg_3n |Void) [(Str "S" |Char*) (Call (Fn i2s |Char*) [(Var i |Int)] |Char*) (Str ":" |Char*)] |Void)
E:exp (Call (Fn cg_sl_str |Void) [(Var i |Int)] |Void)
E:iff (== (@ (+ (Var st_type |Char*) (Var e1 |Int) |Char*) |Char) (Num 1 |Int) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "BYTE PTR " |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "DWORD PTR " |Char*)] |Void)
E:iff (< (Var e1 |Int) (Var st_local |Int) |Int)
E:exp (Call (Fn cg_2 |Void) [(Str "_" |Char*) (@ (+ (Var id_table |Char**) (@ (+ (Var st_id |Int*) (Var e1 |Int) |Int*) |Int) |Char**) |Char*)] |Void)
E:ret (Num 0 |Int)
E:var (@ (+ (Var st_value |Int*) (Var e1 |Int) |Int*) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "[ebp" |Char*)] |Void)
E:iff (> (Var v |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "+" |Char*)] |Void)
E:exp (Call (Fn cg_2 |Void) [(Call (Fn i2s |Char*) [(Var v |Int)] |Char*) (Str "]" |Char*)] |Void)
E:ret (@ (+ (Var id_table |Char**) (@ (+ (Var st_id |Int*) (Var e1 |Int) |Int*) |Int) |Char**) |Char*)
E:var (Call (Fn cg_var |Char*) [(Var e |Int)] |Char*)
E:iff (Var name |Char*)
E:exp (Call (Fn cg_2n |Void) [(Str " # " |Char*) (Var name |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "\n" |Char*)] |Void)
E:var (& (@ (+ (Var e |Int*) (Num 0 |Int) |Int*) |Int) (Num 255 |Int) |Int)
E:iff (== (Var e0 |Int) (Num 1 |Int) |Int)
E:var (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int)
E:iff (== (Var n |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  xor eax,eax" |Char*)] |Void)
E:exp (Call (Fn cg_2n |Void) [(Str "  mov eax," |Char*) (Call (Fn i2s |Char*) [(Var n |Int)] |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 2 |Int) |Int)
E:exp (Call (Fn cg_2n |Void) [(Str "  mov eax,OFFSET FLAT:S" |Char*) (Call (Fn i2s |Char*) [(@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int)] |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 3 |Int) |Int)
E:var (@ (+ (Var st_kind |Char*) (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Char*) |Char)
E:iff (|| (== (Var k |Int) (Num 1 |Int) |Int) (== (Var k |Int) (Num 3 |Int) |Int) |Int)
E:exp (Call (Fn assert |Void) [(== (/ (@ (+ (Var e |Int*) (Num 0 |Int) |Int*) |Int) (Num 256 |Int) |Int) (@ (+ (Var st_type |Char*) (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Char*) |Char) |Int) (Str "ET_var is wrong" |Char*)] |Void)
E:iff (== (@ (+ (Var st_type |Char*) (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Char*) |Char) (Num 1 |Int) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "  movsx eax," |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  mov eax," |Char*)] |Void)
E:exp (Call (Fn cg_var_n |Void) [(@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int)] |Void)
E:exp (Call (Fn assert |Void) [(== (Var k |Int) (Num 2 |Int) |Int) (Str "Must be var | arg | array" |Char*)] |Void)
E:var (@ (+ (Var st_id |Int*) (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*) |Int)
E:iff (< (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) (Var st_local |Int) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "  mov eax,OFFSET FLAT:_" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  lea eax,[ebp" |Char*)] |Void)
E:var (@ (+ (Var st_value |Int*) (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*) |Int)
E:iff (> (Var v |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "+" |Char*)] |Void)
E:exp (Call (Fn cg_2 |Void) [(Call (Fn i2s |Char*) [(Var v |Int)] |Char*) (Str "] # " |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(@ (+ (Var id_table |Char**) (Var id |Int) |Char**) |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 5 |Int) |Int)
E:iff (!= (& (@ (Cast Int* (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*) |Int) (Num 255 |Int) |Int) (Num 4 |Int) |Int)
E:exp (Call (Fn err1 |Void) [(Str "A call must have fn name on the left" |Char*)] |Void)
E:var (Call (Fn cg_exprs_backwards_with_push |Int) [(Cast Int** (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int) |Int**)] |Int)
E:exp (Call (Fn cg_2n |Void) [(Str "  call _" |Char*) (@ (+ (Var id_table |Char**) (@ (+ (Var st_id |Int*) (@ (+ (Cast Int* (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*) (Num 1 |Int) |Int*) |Int) |Int*) |Int) |Char**) |Char*)] |Void)
E:iff (> (Var n_args |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn cg_2n |Void) [(Str "  add esp," |Char*) (Call (Fn i2s |Char*) [(* (Num 4 |Int) (Var n_args |Int) |Int)] |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 61 |Char) |Int)
E:var (Cast Int* (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*)
E:var (Cast Int* (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int) |Int*)
E:var (& (@ (+ (Var e1 |Int*) (Num 0 |Int) |Int*) |Int) (Num 255 |Int) |Int)
E:iff (&& (Call (Fn se_is_ptr |Int) [(/ (@ (+ (Var e1 |Int*) (Num 0 |Int) |Int*) |Int) (Num 256 |Int) |Int)] |Int) (Call (Fn se_is_int |Int) [(/ (@ (+ (Var e2 |Int*) (Num 0 |Int) |Int*) |Int) (Num 256 |Int) |Int)] |Int) |Int)
E:iff (! (&& (== (& (@ (+ (Var e2 |Int*) (Num 0 |Int) |Int*) |Int) (Num 255 |Int) |Int) (Num 1 |Int) |Int) (== (@ (+ (Var e2 |Int*) (Num 1 |Int) |Int*) |Int) (Num 0 |Int) |Int) |Int) |Int)
E:exp (Call (Fn err1 |Void) [(Str "Can't assign integer to pointer" |Char*)] |Void)
E:iff (== (Var e1tag |Int) (Num 3 |Int) |Int)
E:iff (== (@ (+ (Var st_kind |Char*) (@ (+ (Var e1 |Int*) (Num 1 |Int) |Int*) |Int) |Char*) |Char) (Num 2 |Int) |Int)
E:exp (Call (Fn err2 |Void) [(Str "Can't assign to array: " |Char*) (@ (+ (Var id_table |Char**) (@ (+ (Var st_id |Int*) (@ (+ (Var e1 |Int*) (Num 1 |Int) |Int*) |Int) |Int*) |Int) |Char**) |Char*)] |Void)
E:exp (Call (Fn cg_expr |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int) |Int*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  mov " |Char*)] |Void)
E:var (Call (Fn cg_var |Char*) [(@ (+ (Var e1 |Int*) (Num 1 |Int) |Int*) |Int)] |Char*)
E:iff (== (/ (@ (Var e1 |Int*) |Int) (Num 256 |Int) |Int) (Num 1 |Int) |Int)
E:exp (Call (Fn cg_o |Void) [(Str ",al" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str ",eax" |Char*)] |Void)
E:iff (Var name |Char*)
E:exp (Call (Fn cg_2n |Void) [(Str " # " |Char*) (Var name |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "\n" |Char*)] |Void)
E:iff (== (Var e1tag |Int) (Num 7 |Int) |Int)
E:var (& (@ (Cast Int* (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int) |Int*) |Int) (Num 255 |Int) |Int)
E:var (@ (+ (Cast Int* (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int) |Int*) (Num 1 |Int) |Int*) |Int)
E:iff (|| (== (Var e2et |Int) (Num 1 |Int) |Int) (&& (== (Var e2et |Int) (Num 3 |Int) |Int) (!= (@ (+ (Var st_kind |Char*) (Var n |Int) |Char*) |Char) (Num 2 |Int) |Int) |Int) |Int)
E:exp (Call (Fn cg_expr |Void) [(Cast Int* (@ (+ (Var e1 |Int*) (Num 1 |Int) |Int*) |Int) |Int*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  mov ebx,eax" |Char*)] |Void)
E:iff (== (Var e2et |Int) (Num 1 |Int) |Int)
E:iff (== (Var n |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  xor eax,eax" |Char*)] |Void)
E:exp (Call (Fn cg_2n |Void) [(Str "  mov eax," |Char*) (Call (Fn i2s |Char*) [(Var n |Int)] |Char*)] |Void)
E:iff (== (/ (@ (Cast Int* (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int) |Int*) |Int) (Num 256 |Int) |Int) (Num 1 |Int) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "  movsx eax," |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  mov eax," |Char*)] |Void)
E:exp (Call (Fn cg_var_n |Void) [(Var n |Int)] |Void)
E:exp (Call (Fn cg_expr |Void) [(Cast Int* (@ (+ (Var e1 |Int*) (Num 1 |Int) |Int*) |Int) |Int*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  push eax" |Char*)] |Void)
E:exp (Call (Fn cg_expr |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int) |Int*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  pop ebx" |Char*)] |Void)
E:iff (== (/ (@ (+ (Var e1 |Int*) (Num 0 |Int) |Int*) |Int) (Num 256 |Int) |Int) (Num 1 |Int) |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  mov BYTE PTR [ebx],al" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  mov DWORD PTR [ebx],eax" |Char*)] |Void)
E:exp (Call (Fn err1 |Void) [(Str "Wrong expression on left of '='" |Char*)] |Void)
E:iff (|| (== (Var e0 |Int) (Num 105 |Char) |Int) (== (Var e0 |Int) (Num 100 |Char) |Int) |Int)
E:var (Cast Int* (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*)
E:var (& (@ (+ (Var e1 |Int*) (Num 0 |Int) |Int*) |Int) (Num 255 |Int) |Int)
E:iff (== (Var e1et |Int) (Num 3 |Int) |Int)
E:var (@ (+ (Var st_kind |Char*) (@ (+ (Var e1 |Int*) (Num 1 |Int) |Int*) |Int) |Char*) |Char)
E:iff (== (Var k |Int) (Num 2 |Int) |Int)
E:exp (Call (Fn err2 |Void) [(Str "Can't be array name: " |Char*) (@ (+ (Var id_table |Char**) (@ (+ (Var st_id |Int*) (@ (+ (Var e1 |Int*) (Num 1 |Int) |Int*) |Int) |Int*) |Int) |Char**) |Char*)] |Void)
E:iff (== (@ (+ (Var st_type |Char*) (@ (+ (Var e1 |Int*) (Num 1 |Int) |Int*) |Int) |Char*) |Char) (Num 1 |Int) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "  movsx eax," |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  mov eax," |Char*)] |Void)
E:exp (Call (Fn cg_var_n |Void) [(@ (+ (Var e1 |Int*) (Num 1 |Int) |Int*) |Int)] |Void)
E:iff (== (Var e0 |Int) (Num 105 |Char) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "  add eax," |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  sub eax," |Char*)] |Void)
E:iff (Call (Fn se_is_ptr4 |Int) [(@ (+ (Var st_type |Char*) (@ (+ (Var e1 |Int*) (Num 1 |Int) |Int*) |Int) |Char*) |Char)] |Int)
E:exp (Call (Fn cg_n |Void) [(Str "4" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "1" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  mov " |Char*)] |Void)
E:var (Call (Fn cg_var |Char*) [(@ (+ (Var e1 |Int*) (Num 1 |Int) |Int*) |Int)] |Char*)
E:iff (== (/ (@ (Var e1 |Int*) |Int) (Num 256 |Int) |Int) (Num 1 |Int) |Int)
E:exp (Call (Fn cg_o |Void) [(Str ",al" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str ",eax" |Char*)] |Void)
E:iff (Var name |Char*)
E:exp (Call (Fn cg_2n |Void) [(Str " # " |Char*) (Var name |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "\n" |Char*)] |Void)
E:iff (== (Var e1et |Int) (Num 7 |Int) |Int)
E:var (/ (@ (+ (Var e |Int*) (Num 0 |Int) |Int*) |Int) (Num 256 |Int) |Int)
E:exp (Call (Fn cg_expr |Void) [(Cast Int* (@ (+ (Var e1 |Int*) (Num 1 |Int) |Int*) |Int) |Int*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  mov ebx,eax" |Char*)] |Void)
E:iff (== (Var t |Int) (Num 1 |Int) |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  movsx eax,BYTE PTR [ebx]" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  mov eax,DWORD PTR [ebx]" |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 105 |Char) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "  add eax," |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  sub eax," |Char*)] |Void)
E:iff (Call (Fn se_is_ptr4 |Int) [(Var t |Int)] |Int)
E:exp (Call (Fn cg_n |Void) [(Str "4" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "1" |Char*)] |Void)
E:iff (== (Var t |Int) (Num 1 |Int) |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  mov BYTE PTR [ebx],al" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  mov DWORD PTR [ebx],eax" |Char*)] |Void)
E:exp (Call (Fn err1 |Void) [(Str "Wrong expr for increment/decrement" |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 7 |Int) |Int)
E:var (/ (@ (+ (Var e |Int*) (Num 0 |Int) |Int*) |Int) (Num 256 |Int) |Int)
E:exp (Call (Fn cg_expr |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*)] |Void)
E:iff (== (/ (@ (+ (Var e |Int*) (Num 0 |Int) |Int*) |Int) (Num 256 |Int) |Int) (Num 1 |Int) |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  movsx eax,BYTE PTR [eax]" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  mov eax,DWORD PTR [eax]" |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 6 |Int) |Int)
E:exp (Call (Fn cg_expr |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*)] |Void)
E:iff (== (Var e0 |Int) (Num 8 |Int) |Int)
E:exp (Call (Fn cg_expr |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  neg eax" |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 126 |Char) |Int)
E:exp (Call (Fn cg_expr |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  not eax" |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 33 |Char) |Int)
E:exp (Call (Fn cg_expr |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  test eax,eax\n  setz al\n  movzx eax,al" |Char*)] |Void)
E:iff (|| (== (Var e0 |Int) (Num 101 |Char) |Int) (== (Var e0 |Int) (Num 110 |Char) |Int) |Int)
E:var (& (@ (Cast Int* (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int) |Int*) |Int) (Num 255 |Int) |Int)
E:var (@ (+ (Cast Int* (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int) |Int*) (Num 1 |Int) |Int*) |Int)
E:var (&& (== (Var e2et |Int) (Num 1 |Int) |Int) (== (Var n |Int) (Num 0 |Int) |Int) |Int)
E:iff (&& (Call (Fn se_is_ptr |Int) [(/ (@ (Cast Int* (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*) |Int) (Num 256 |Int) |Int)] |Int) (Call (Fn se_is_int |Int) [(/ (@ (Cast Int* (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int) |Int*) |Int) (Num 256 |Int) |Int)] |Int) |Int)
E:iff (! (Var zero |Int) |Int)
E:exp (Call (Fn err1 |Void) [(Str "Can't compare poiner and number" |Char*)] |Void)
E:var (Str "e" |Char*)
E:iff (|| (== (Var e2et |Int) (Num 1 |Int) |Int) (&& (== (Var e2et |Int) (Num 3 |Int) |Int) (!= (@ (+ (Var st_kind |Char*) (Var n |Int) |Char*) |Char) (Num 2 |Int) |Int) |Int) |Int)
E:exp (Call (Fn cg_expr |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*)] |Void)
E:iff (Var zero |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  test eax,eax" |Char*)] |Void)
E:exp (= (Var cmp |Char*) (Str "z" |Char*) |Char*)
E:iff (&& (== (Var e2et |Int) (Num 3 |Int) |Int) (== (/ (@ (Cast Int* (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int) |Int*) |Int) (Num 256 |Int) |Int) (Num 1 |Int) |Int) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "  movsx ebx," |Char*)] |Void)
E:exp (Call (Fn cg_var_n |Void) [(Var n |Int)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  cmp eax,ebx" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  cmp eax," |Char*)] |Void)
E:iff (== (Var e2et |Int) (Num 3 |Int) |Int)
E:exp (Call (Fn cg_var_n |Void) [(Var n |Int)] |Void)
E:exp (Call (Fn cg_n |Void) [(Call (Fn i2s |Char*) [(Var n |Int)] |Char*)] |Void)
E:exp (Call (Fn cg_expr |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int) |Int*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  push eax" |Char*)] |Void)
E:exp (Call (Fn cg_expr |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  pop ebx\n  cmp eax,ebx" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  set" |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 110 |Char) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "n" |Char*)] |Void)
E:exp (Call (Fn cg_2n |Void) [(Var cmp |Char*) (Str " al\n  movzx eax,al" |Char*)] |Void)
E:iff (Call (Fn memchr |Char*) [(Str "<>lg" |Char*) (Var e0 |Int) (Num 4 |Int)] |Char*)
E:var (& (@ (Cast Int* (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int) |Int*) |Int) (Num 255 |Int) |Int)
E:var (@ (+ (Cast Int* (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int) |Int*) (Num 1 |Int) |Int*) |Int)
E:iff (|| (== (Var e2et |Int) (Num 1 |Int) |Int) (&& (== (Var e2et |Int) (Num 3 |Int) |Int) (!= (@ (+ (Var st_kind |Char*) (Var n |Int) |Char*) |Char) (Num 2 |Int) |Int) |Int) |Int)
E:exp (Call (Fn cg_expr |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*)] |Void)
E:iff (&& (== (Var e2et |Int) (Num 3 |Int) |Int) (== (/ (@ (Cast Int* (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int) |Int*) |Int) (Num 256 |Int) |Int) (Num 1 |Int) |Int) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "  movsx ebx," |Char*)] |Void)
E:exp (Call (Fn cg_var_n |Void) [(Var n |Int)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  cmp eax,ebx" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  cmp eax," |Char*)] |Void)
E:iff (== (Var e2et |Int) (Num 3 |Int) |Int)
E:exp (Call (Fn cg_var_n |Void) [(Var n |Int)] |Void)
E:exp (Call (Fn cg_n |Void) [(Call (Fn i2s |Char*) [(Var n |Int)] |Char*)] |Void)
E:exp (Call (Fn cg_expr |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int) |Int*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  push eax" |Char*)] |Void)
E:exp (Call (Fn cg_expr |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  pop ebx\n  cmp eax,ebx" |Char*)] |Void)
E:var (Str "l" |Char*)
E:iff (== (Var e0 |Int) (Num 62 |Char) |Int)
E:exp (= (Var o |Char*) (Str "g" |Char*) |Char*)
E:iff (== (Var e0 |Int) (Num 108 |Char) |Int)
E:exp (= (Var o |Char*) (Str "le" |Char*) |Char*)
E:iff (== (Var e0 |Int) (Num 103 |Char) |Int)
E:exp (= (Var o |Char*) (Str "ge" |Char*) |Char*)
E:exp (Call (Fn cg_3n |Void) [(Str "  set" |Char*) (Var o |Char*) (Str " al\n  movzx eax,al" |Char*)] |Void)
E:iff (Call (Fn memchr |Char*) [(Str "+-&|^*/%" |Char*) (Var e0 |Int) (Num 8 |Int)] |Char*)
E:var (/ (@ (Cast Int* (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*) |Int) (Num 256 |Int) |Int)
E:var (/ (@ (Cast Int* (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int) |Int*) |Int) (Num 256 |Int) |Int)
E:var (& (@ (Cast Int* (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int) |Int*) |Int) (Num 255 |Int) |Int)
E:var (Num 0 |Int)
E:iff (== (Var e0 |Int) (Num 43 |Char) |Int)
E:iff (&& (Call (Fn se_is_ptr4 |Int) [(Var e1t |Int)] |Int) (Call (Fn se_is_int |Int) [(Var e2t |Int)] |Int) |Int)
E:exp (= (Var mixed |Int) (Num 1 |Int) |Int)
E:iff (&& (Call (Fn se_is_int |Int) [(Var e1t |Int)] |Int) (Call (Fn se_is_ptr4 |Int) [(Var e2t |Int)] |Int) |Int)
E:exp (= (Var mixed |Int) (Num 2 |Int) |Int)
E:iff (&& (&& (== (Var e0 |Int) (Num 45 |Char) |Int) (Call (Fn se_is_ptr4 |Int) [(Var e1t |Int)] |Int) |Int) (Call (Fn se_is_int |Int) [(Var e2t |Int)] |Int) |Int)
E:exp (= (Var mixed |Int) (Num 3 |Int) |Int)
E:iff (== (Var e2et |Int) (Num 1 |Int) |Int)
E:exp (Call (Fn cg_expr |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*)] |Void)
E:var (@ (+ (Cast Int* (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int) |Int*) (Num 1 |Int) |Int*) |Int)
E:iff (|| (&& (&& (&& (!= (Var e0 |Int) (Num 43 |Char) |Int) (!= (Var e0 |Int) (Num 45 |Char) |Int) |Int) (!= (Var e0 |Int) (Num 124 |Char) |Int) |Int) (!= (Var e0 |Int) (Num 94 |Char) |Int) |Int) (!= (Var n |Int) (Num 0 |Int) |Int) |Int)
E:iff (== (Var e0 |Int) (Num 43 |Char) |Int)
E:iff (== (Var mixed |Int) (Num 2 |Int) |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  sal eax,2" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  add eax," |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 45 |Char) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "  sub eax," |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 42 |Char) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "  imul eax,eax," |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 38 |Char) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "  and eax," |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 124 |Char) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "  or eax," |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 94 |Char) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "  xor eax," |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  cdq\n  mov ebx," |Char*)] |Void)
E:iff (|| (&& (== (Var e0 |Int) (Num 43 |Char) |Int) (== (Var mixed |Int) (Num 1 |Int) |Int) |Int) (&& (== (Var e0 |Int) (Num 45 |Char) |Int) (== (Var mixed |Int) (Num 3 |Int) |Int) |Int) |Int)
E:exp (= (Var n |Int) (* (Var n |Int) (Num 4 |Int) |Int) |Int)
E:exp (Call (Fn cg_n |Void) [(Call (Fn i2s |Char*) [(Var n |Int)] |Char*)] |Void)
E:iff (|| (== (Var e0 |Int) (Num 47 |Char) |Int) (== (Var e0 |Int) (Num 37 |Char) |Int) |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  idiv ebx" |Char*)] |Void)
E:iff (&& (&& (== (Var e2et |Int) (Num 3 |Int) |Int) (!= (Var e2t |Int) (Num 1 |Int) |Int) |Int) (!= (@ (+ (Var st_kind |Char*) (@ (+ (Cast Int* (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int) |Int*) (Num 1 |Int) |Int*) |Int) |Char*) |Char) (Num 2 |Int) |Int) |Int)
E:exp (Call (Fn cg_expr |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*)] |Void)
E:iff (== (Var e0 |Int) (Num 43 |Char) |Int)
E:iff (== (Var mixed |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "  add eax," |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  mov ebx," |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 45 |Char) |Int)
E:iff (== (Var mixed |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "  sub eax," |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  mov ebx," |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 42 |Char) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "  imul eax," |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 38 |Char) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "  and eax," |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 124 |Char) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "  or eax," |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 94 |Char) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "  xor eax," |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  cdq" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  idiv " |Char*)] |Void)
E:exp (Call (Fn cg_var_n |Void) [(@ (+ (Cast Int* (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int) |Int*) (Num 1 |Int) |Int*) |Int)] |Void)
E:iff (== (Var e0 |Int) (Num 43 |Char) |Int)
E:iff (== (Var mixed |Int) (Num 1 |Int) |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  lea eax,[eax+4*ebx]" |Char*)] |Void)
E:iff (== (Var mixed |Int) (Num 2 |Int) |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  lea eax,[4*eax+ebx]" |Char*)] |Void)
E:iff (&& (== (Var e0 |Int) (Num 45 |Char) |Int) (== (Var mixed |Int) (Num 3 |Int) |Int) |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  sal ebx,2\n  sub eax,ebx" |Char*)] |Void)
E:exp (Call (Fn cg_expr |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int) |Int*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  push eax" |Char*)] |Void)
E:exp (Call (Fn cg_expr |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  pop ebx" |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 43 |Char) |Int)
E:iff (== (Var mixed |Int) (Num 1 |Int) |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  lea eax,[eax+4*ebx]" |Char*)] |Void)
E:iff (== (Var mixed |Int) (Num 2 |Int) |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  lea eax,[4*eax+ebx]" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  add eax,ebx" |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 45 |Char) |Int)
E:iff (== (Var mixed |Int) (Num 3 |Int) |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  sal ebx,2" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  sub eax,ebx" |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 42 |Char) |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  imul eax,ebx" |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 38 |Char) |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  and eax,ebx" |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 124 |Char) |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  or eax,ebx" |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 94 |Char) |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  xor eax,ebx" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  cdq" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  idiv ebx" |Char*)] |Void)
E:iff (&& (== (Var e0 |Int) (Num 45 |Char) |Int) (Call (Fn se_is_ptr4 |Int) [(/ (@ (Cast Int* (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int) |Int*) |Int) (Num 256 |Int) |Int)] |Int) |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  sar eax,2" |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 37 |Char) |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  mov eax,edx" |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 97 |Char) |Int)
E:var (Call (Fn cg_new_label |Int) [] |Int)
E:exp (Call (Fn cg_expr |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  test eax,eax\n  setnz al\n  movzx eax,al" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  test eax,eax" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  jz A" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Call (Fn i2s |Char*) [(Var and_label |Int)] |Char*)] |Void)
E:exp (Call (Fn cg_expr |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int) |Int*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  test eax,eax\n  setnz al\n  movzx eax,al" |Char*)] |Void)
E:exp (Call (Fn cg_3n |Void) [(Str "A" |Char*) (Call (Fn i2s |Char*) [(Var and_label |Int)] |Char*) (Str ":" |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 111 |Char) |Int)
E:var (Call (Fn cg_new_label |Int) [] |Int)
E:exp (Call (Fn cg_expr |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 1 |Int) |Int*) |Int) |Int*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  test eax,eax\n  setnz al\n  movzx eax,al" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  test eax,eax" |Char*)] |Void)
E:exp (Call (Fn cg_2n |Void) [(Str "  jnz O" |Char*) (Call (Fn i2s |Char*) [(Var or_label |Int)] |Char*)] |Void)
E:exp (Call (Fn cg_expr |Void) [(Cast Int* (@ (+ (Var e |Int*) (Num 2 |Int) |Int*) |Int) |Int*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  test eax,eax\n  setnz al\n  movzx eax,al" |Char*)] |Void)
E:exp (Call (Fn cg_3n |Void) [(Str "O" |Char*) (Call (Fn i2s |Char*) [(Var or_label |Int)] |Char*) (Str ":" |Char*)] |Void)
E:iff (== (Var e0 |Int) (Num 4 |Int) |Int)
E:exp (Call (Fn err1 |Void) [(Str "Just fn name? Must be fn(...)" |Char*)] |Void)
E:exp (Call (Fn assert |Void) [(Num 0 |Int) (Str "What expr?" |Char*)] |Void)
E:iff (! (Var x |Int**) |Int)
E:ret (Num 0 |Int)
E:var (Call (Fn cg_exprs_backwards_with_push |Int) [(Cast Int** (@ (+ (Var x |Int**) (Num 1 |Int) |Int**) |Int*) |Int**)] |Int)
E:exp (Call (Fn cg_expr |Void) [(@ (+ (Var x |Int**) (Num 0 |Int) |Int**) |Int*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  push eax" |Char*)] |Void)
E:ret (+ (Var n |Int) (Num 1 |Int) |Int)
E:fr2 (Var x |Int**)
E:fr3 [(= (Var x |Int**) (Cast Int** (@ (+ (Var x |Int**) (Num 1 |Int) |Int**) |Int*) |Int**) |Int**)]
E:exp (Call (Fn cg_expr |Void) [(@ (+ (Var x |Int**) (Num 0 |Int) |Int**) |Int*)] |Void)
E:exp (Call (Fn p1 |Void) [(Str "            " |Char*)] |Void)
E:var (Num 0 |Int)
E:fr2 (< (Var i |Int) (Var tL |Int) |Int)
E:fr3 [(++ (Var i |Int) |Int)]
E:exp (Call (Fn p1 |Void) [(Str "." |Char*)] |Void)
E:iff (Var PA_TRACE |Int)
E:exp (Call (Fn tI |Void) [] |Void)
E:exp (Call (Fn p1n |Void) [(Var s |Char*)] |Void)
E:exp (++ (Var tL |Int) |Int)
E:iff (Var PA_TRACE |Int)
E:exp (Call (Fn tI |Void) [] |Void)
E:exp (Call (Fn p2n |Void) [(Var s |Char*) (Var s2 |Char*)] |Void)
E:exp (++ (Var tL |Int) |Int)
E:iff (Var PA_TRACE |Int)
E:exp (Call (Fn tI |Void) [] |Void)
E:exp (Call (Fn p3n |Void) [(Var s |Char*) (Var s2 |Char*) (Var s3 |Char*)] |Void)
E:exp (++ (Var tL |Int) |Int)
E:iff (Var PA_TRACE |Int)
E:exp (-- (Var tL |Int) |Int)
E:exp (Call (Fn tI |Void) [] |Void)
E:exp (Call (Fn p2n |Void) [(Str "<< " |Char*) (Call (Fn i2s |Char*) [(Var r |Int)] |Char*)] |Void)
E:ret (Var r |Int)
E:iff (Var PA_TRACE |Int)
E:exp (-- (Var tL |Int) |Int)
E:exp (Call (Fn tI |Void) [] |Void)
E:exp (Call (Fn p2n |Void) [(Str "<<* " |Char*) (Call (Fn i2s |Char*) [(Cast Int (Var r |Int*) |Int)] |Char*)] |Void)
E:ret (Var r |Int*)
E:exp (Call (Fn t1 |Void) [(Str "px_primary" |Char*)] |Void)
E:iff (|| (|| (== (Var sc_tkn |Int) (Num 2 |Int) |Int) (== (Var sc_tkn |Int) (Num 3 |Int) |Int) |Int) (== (Var sc_tkn |Int) (Num 4 |Int) |Int) |Int)
E:var (Num 4 |Int)
E:var (Num 1 |Int)
E:iff (== (Var sc_tkn |Int) (Num 4 |Int) |Int)
E:exp (= (Var k |Int) (Num 2 |Int) |Int)
E:exp (= (Var t |Int) (Num 2 |Int) |Int)
E:iff (== (Var sc_tkn |Int) (Num 3 |Int) |Int)
E:exp (= (Var t |Int) (Num 1 |Int) |Int)
E:exp (= (Var r |Int*) (Call (Fn ET_I |Int*) [(Var k |Int) (Var sc_num |Int) (Var t |Int)] |Int*) |Int*)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:ret (Call (Fn tx |Int*) [(Var r |Int*)] |Int*)
E:iff (== (Var sc_tkn |Int) (Num 5 |Int) |Int)
E:var (Call (Fn st_find |Int) [(Var sc_num |Int)] |Int)
E:iff (< (Var varid |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn err2 |Void) [(Str "Name is not defined: " |Char*) (@ (+ (Var id_table |Char**) (Var sc_num |Int) |Char**) |Char*)] |Void)
E:iff (== (@ (+ (Var st_kind |Char*) (Var varid |Int) |Char*) |Char) (Num 0 |Int) |Int)
E:exp (= (Var r |Int*) (Call (Fn ET_I |Int*) [(Num 1 |Int) (@ (+ (Var st_value |Int*) (Var varid |Int) |Int*) |Int) (Num 4 |Int)] |Int*) |Int*)
E:iff (== (@ (+ (Var st_kind |Char*) (Var varid |Int) |Char*) |Char) (Num 4 |Int) |Int)
E:exp (= (Var r |Int*) (Call (Fn ET_I |Int*) [(Num 4 |Int) (Var varid |Int) (@ (+ (Var st_type |Char*) (Var varid |Int) |Char*) |Char)] |Int*) |Int*)
E:iff (== (@ (+ (Var st_kind |Char*) (Var varid |Int) |Char*) |Char) (Num 2 |Int) |Int)
E:exp (= (Var r |Int*) (Call (Fn ET_I |Int*) [(Num 3 |Int) (Var varid |Int) (+ (@ (+ (Var st_type |Char*) (Var varid |Int) |Char*) |Char) (Num 1 |Int) |Int)] |Int*) |Int*)
E:exp (= (Var r |Int*) (Call (Fn ET_I |Int*) [(Num 3 |Int) (Var varid |Int) (@ (+ (Var st_type |Char*) (Var varid |Int) |Char*) |Char)] |Int*) |Int*)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:ret (Call (Fn tx |Int*) [(Var r |Int*)] |Int*)
E:iff (!= (Var sc_tkn |Int) (Num 40 |Char) |Int)
E:ret (Call (Fn tx |Int*) [(Num 0 |Int)] |Int*)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (! (= (Var r |Int*) (Call (Fn px_expr |Int*) [(Num 0 |Int)] |Int*) |Int*) |Int)
E:ret (Call (Fn tx |Int*) [(Num 0 |Int)] |Int*)
E:iff (!= (Var sc_tkn |Int) (Num 41 |Char) |Int)
E:ret (Call (Fn tx |Int*) [(Num 0 |Int)] |Int*)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:ret (Call (Fn tx |Int*) [(Var r |Int*)] |Int*)
E:var (Num 0 |Int)
E:exp (Call (Fn t1 |Void) [(Str "pa_integer" |Char*)] |Void)
E:iff (== (Var sc_tkn |Int) (Num 45 |Char) |Int)
E:exp (= (Var neg |Int) (Num 1 |Int) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (&& (&& (!= (Var sc_tkn |Int) (Num 2 |Int) |Int) (!= (Var sc_tkn |Int) (Num 3 |Int) |Int) |Int) (!= (Var sc_tkn |Int) (Num 5 |Int) |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (= (Var se_type |Int) (Num 4 |Int) |Int)
E:iff (== (Var sc_tkn |Int) (Num 5 |Int) |Int)
E:var (Call (Fn st_find |Int) [(Var sc_num |Int)] |Int)
E:iff (|| (< (Var i |Int) (Num 0 |Int) |Int) (!= (@ (+ (Var st_kind |Char*) (Var i |Int) |Char*) |Char) (Num 0 |Int) |Int) |Int)
E:exp (Call (Fn err2 |Void) [(Str "Can't find enum Id in const expression" |Char*) (@ (+ (Var id_table |Char**) (Var sc_num |Int) |Char**) |Char*)] |Void)
E:exp (= (Var se_value |Int) (@ (+ (Var st_value |Int*) (Var i |Int) |Int*) |Int) |Int)
E:exp (= (Var se_value |Int) (Var sc_num |Int) |Int)
E:iff (== (Var sc_tkn |Int) (Num 3 |Int) |Int)
E:exp (= (Var se_type |Int) (Num 1 |Int) |Int)
E:iff (Var neg |Int)
E:exp (= (Var se_value |Int) (Neg (Var se_value |Int) |Int) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:ret (Call (Fn t_ |Int) [(Num 1 |Int)] |Int)
E:exp (Call (Fn t1 |Void) [(Str "px_exprs" |Char*)] |Void)
E:var (Call (Fn px_expr |Int*) [(Num 0 |Int)] |Int*)
E:iff (! (Var r |Int*) |Int)
E:ret (Call (Fn tx |Int*) [(Num 0 |Int)] |Int*)
E:var (Call (Fn ET_P |Int*) [(Var r |Int*)] |Int*)
E:var (Var first |Int*)
E:whl (== (Var sc_tkn |Int) (Num 44 |Char) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (! (= (Var r |Int*) (Call (Fn px_expr |Int*) [(Num 0 |Int)] |Int*) |Int*) |Int)
E:ret (Call (Fn tx |Int*) [(Num 0 |Int)] |Int*)
E:exp (= (@ (+ (Var last |Int*) (Num 1 |Int) |Int*) |Int) (Cast Int (Call (Fn ET_P |Int*) [(Var r |Int*)] |Int*) |Int) |Int)
E:exp (= (Var last |Int*) (Cast Int* (@ (+ (Var last |Int*) (Num 1 |Int) |Int*) |Int) |Int*) |Int*)
E:ret (Call (Fn tx |Int*) [(Var first |Int*)] |Int*)
E:exp (Call (Fn t1 |Void) [(Str "px_call_or_index" |Char*)] |Void)
E:whl (|| (== (Var sc_tkn |Int) (Num 40 |Char) |Int) (== (Var sc_tkn |Int) (Num 91 |Char) |Int) |Int)
E:iff (== (Var sc_tkn |Int) (Num 91 |Char) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (|| (! (= (Var r |Int*) (Call (Fn px_expr |Int*) [(Num 0 |Int)] |Int*) |Int*) |Int) (!= (Var sc_tkn |Int) (Num 93 |Char) |Int) |Int)
E:ret (Call (Fn tx |Int*) [(Num 0 |Int)] |Int*)
E:var (/ (@ (Var e |Int*) |Int) (Num 256 |Int) |Int)
E:var (/ (@ (Var r |Int*) |Int) (Num 256 |Int) |Int)
E:iff (! (|| (|| (|| (== (Var et |Int) (Num 2 |Int) |Int) (== (Var et |Int) (Num 3 |Int) |Int) |Int) (== (Var et |Int) (Num 5 |Int) |Int) |Int) (== (Var et |Int) (Num 6 |Int) |Int) |Int) |Int)
E:exp (Call (Fn err1 |Void) [(Str "Indexed expr. must be pointer" |Char*)] |Void)
E:iff (! (|| (== (Var rt |Int) (Num 4 |Int) |Int) (== (Var rt |Int) (Num 1 |Int) |Int) |Int) |Int)
E:exp (Call (Fn err1 |Void) [(Str "Index must be integer" |Char*)] |Void)
E:exp (= (Var e |Int*) (Call (Fn ET_1 |Int*) [(Num 7 |Int) (Call (Fn ET_2 |Int*) [(Num 43 |Char) (Var e |Int*) (Var r |Int*) (Var et |Int)] |Int*) (- (Var et |Int) (Num 1 |Int) |Int)] |Int*) |Int*)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (== (Var sc_tkn |Int) (Num 41 |Char) |Int)
E:exp (= (Var e |Int*) (Call (Fn ET_2 |Int*) [(Num 5 |Int) (Var e |Int*) (Num 0 |Int) (/ (@ (Var e |Int*) |Int) (Num 256 |Int) |Int)] |Int*) |Int*)
E:iff (|| (! (= (Var r |Int*) (Call (Fn px_exprs |Int*) [] |Int*) |Int*) |Int) (!= (Var sc_tkn |Int) (Num 41 |Char) |Int) |Int)
E:ret (Call (Fn tx |Int*) [(Num 0 |Int)] |Int*)
E:exp (= (Var e |Int*) (Call (Fn ET_2 |Int*) [(Num 5 |Int) (Var e |Int*) (Var r |Int*) (/ (@ (Var e |Int*) |Int) (Num 256 |Int) |Int)] |Int*) |Int*)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:ret (Call (Fn tx |Int*) [(Var e |Int*)] |Int*)
E:exp (Call (Fn t1 |Void) [(Str "px_postfix" |Char*)] |Void)
E:var (Call (Fn px_primary |Int*) [] |Int*)
E:iff (! (Var r |Int*) |Int)
E:ret (Call (Fn tx |Int*) [(Num 0 |Int)] |Int*)
E:ret (Call (Fn tx |Int*) [(Call (Fn px_call_or_index |Int*) [(Var r |Int*)] |Int*)] |Int*)
E:exp (Call (Fn t1 |Void) [(Str "px_unexpr" |Char*)] |Void)
E:iff (|| (== (Var sc_tkn |Int) (Num 105 |Char) |Int) (== (Var sc_tkn |Int) (Num 100 |Char) |Int) |Int)
E:var (Var sc_tkn |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:var (Call (Fn px_unexpr |Int*) [] |Int*)
E:ret (Call (Fn tx |Int*) [(Call (Fn ET_1 |Int*) [(Var t |Int) (Var e |Int*) (/ (@ (Var e |Int*) |Int) (Num 256 |Int) |Int)] |Int*)] |Int*)
E:iff (|| (|| (|| (== (Var sc_tkn |Int) (Num 45 |Char) |Int) (== (Var sc_tkn |Int) (Num 33 |Char) |Int) |Int) (== (Var sc_tkn |Int) (Num 42 |Char) |Int) |Int) (== (Var sc_tkn |Int) (Num 126 |Char) |Int) |Int)
E:var (Var sc_tkn |Int)
E:iff (== (Var t |Int) (Num 45 |Char) |Int)
E:exp (= (Var t |Int) (Num 8 |Int) |Int)
E:iff (== (Var t |Int) (Num 42 |Char) |Int)
E:exp (= (Var t |Int) (Num 7 |Int) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:var (Call (Fn px_term |Int*) [] |Int*)
E:var (Num 4 |Int)
E:iff (== (Var t |Int) (Num 7 |Int) |Int)
E:var (/ (@ (Var e |Int*) |Int) (Num 256 |Int) |Int)
E:iff (! (|| (|| (|| (== (Var et |Int) (Num 2 |Int) |Int) (== (Var et |Int) (Num 3 |Int) |Int) |Int) (== (Var et |Int) (Num 5 |Int) |Int) |Int) (== (Var et |Int) (Num 6 |Int) |Int) |Int) |Int)
E:exp (Call (Fn err1 |Void) [(Str "Dereferenced expr. must be pointer" |Char*)] |Void)
E:exp (= (Var type |Int) (- (Var et |Int) (Num 1 |Int) |Int) |Int)
E:ret (Call (Fn tx |Int*) [(Call (Fn ET_1 |Int*) [(Var t |Int) (Var e |Int*) (Var type |Int)] |Int*)] |Int*)
E:ret (Call (Fn tx |Int*) [(Call (Fn px_postfix |Int*) [] |Int*)] |Int*)
E:exp (Call (Fn t1 |Void) [(Str "pa_type" |Char*)] |Void)
E:iff (|| (== (Var sc_tkn |Int) (+ (Num 128 |Int) (Num 2 |Int) |Int) |Int) (== (Var sc_tkn |Int) (+ (Num 128 |Int) (Num 1 |Int) |Int) |Int) |Int)
E:iff (== (Var sc_tkn |Int) (+ (Num 128 |Int) (Num 2 |Int) |Int) |Int)
E:exp (= (Var se_type |Int) (Num 4 |Int) |Int)
E:exp (= (Var se_type |Int) (Num 1 |Int) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:ret (Call (Fn t_ |Int) [(Num 1 |Int)] |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn t1 |Void) [(Str "pa_stars" |Char*)] |Void)
E:exp (= (Var se_stars |Int) (Num 0 |Int) |Int)
E:iff (== (Var sc_tkn |Int) (Num 42 |Char) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:exp (= (Var se_stars |Int) (Num 1 |Int) |Int)
E:iff (== (Var sc_tkn |Int) (Num 42 |Char) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:exp (= (Var se_stars |Int) (Num 2 |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 1 |Int)] |Int)
E:exp (Call (Fn t1 |Void) [(Str "px_term" |Char*)] |Void)
E:iff (== (Var sc_tkn |Int) (Num 40 |Char) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (Call (Fn pa_type |Int) [] |Int)
E:exp (Call (Fn pa_stars |Int) [] |Int)
E:iff (!= (Var sc_tkn |Int) (Num 41 |Char) |Int)
E:ret (Call (Fn tx |Int*) [(Num 0 |Int)] |Int*)
E:var (+ (Var se_type |Int) (Var se_stars |Int) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:ret (Call (Fn tx |Int*) [(Call (Fn ET_1 |Int*) [(Num 6 |Int) (Call (Fn px_term |Int*) [] |Int*) (Var t |Int)] |Int*)] |Int*)
E:var (Call (Fn px_expr |Int*) [(Num 0 |Int)] |Int*)
E:iff (|| (! (Var r |Int*) |Int) (!= (Var sc_tkn |Int) (Num 41 |Char) |Int) |Int)
E:ret (Call (Fn tx |Int*) [(Num 0 |Int)] |Int*)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:ret (Call (Fn tx |Int*) [(Call (Fn px_call_or_index |Int*) [(Var r |Int*)] |Int*)] |Int*)
E:ret (Call (Fn tx |Int*) [(Call (Fn px_unexpr |Int*) [] |Int*)] |Int*)
E:iff (|| (== (Var op |Int) (Num 97 |Char) |Int) (== (Var op |Int) (Num 111 |Char) |Int) |Int)
E:ret (Num 4 |Int)
E:var (/ (@ (Var left |Int*) |Int) (Num 256 |Int) |Int)
E:var (/ (@ (Var right |Int*) |Int) (Num 256 |Int) |Int)
E:iff (&& (&& (== (Var op |Int) (Num 61 |Char) |Int) (== (Var lt |Int) (Num 1 |Int) |Int) |Int) (== (Var rt |Int) (Num 1 |Int) |Int) |Int)
E:ret (Num 1 |Int)
E:iff (&& (Call (Fn se_is_int |Int) [(Var lt |Int)] |Int) (Call (Fn se_is_int |Int) [(Var rt |Int)] |Int) |Int)
E:ret (Num 4 |Int)
E:iff (== (Var op |Int) (Num 61 |Char) |Int)
E:iff (&& (Call (Fn se_is_ptr |Int) [(Var lt |Int)] |Int) (== (Var lt |Int) (Var rt |Int) |Int) |Int)
E:ret (Var lt |Int)
E:iff (&& (Call (Fn se_is_ptr |Int) [(Var lt |Int)] |Int) (|| (== (Var rt |Int) (Num 1 |Int) |Int) (== (Var rt |Int) (Num 4 |Int) |Int) |Int) |Int)
E:ret (Var lt |Int)
E:iff (== (Var op |Int) (Num 43 |Char) |Int)
E:iff (&& (Call (Fn se_is_ptr |Int) [(Var lt |Int)] |Int) (|| (== (Var rt |Int) (Num 1 |Int) |Int) (== (Var rt |Int) (Num 4 |Int) |Int) |Int) |Int)
E:ret (Var lt |Int)
E:iff (&& (|| (== (Var lt |Int) (Num 1 |Int) |Int) (== (Var lt |Int) (Num 4 |Int) |Int) |Int) (Call (Fn se_is_ptr |Int) [(Var rt |Int)] |Int) |Int)
E:ret (Var rt |Int)
E:iff (== (Var op |Int) (Num 45 |Char) |Int)
E:iff (&& (Call (Fn se_is_ptr |Int) [(Var lt |Int)] |Int) (|| (== (Var rt |Int) (Num 1 |Int) |Int) (== (Var rt |Int) (Num 4 |Int) |Int) |Int) |Int)
E:ret (Var lt |Int)
E:iff (&& (Call (Fn se_is_ptr |Int) [(Var lt |Int)] |Int) (== (Var lt |Int) (Var rt |Int) |Int) |Int)
E:ret (Num 4 |Int)
E:iff (|| (== (Var op |Int) (Num 101 |Char) |Int) (== (Var op |Int) (Num 110 |Char) |Int) |Int)
E:iff (&& (Call (Fn se_is_ptr |Int) [(Var lt |Int)] |Int) (== (Var lt |Int) (Var rt |Int) |Int) |Int)
E:ret (Num 4 |Int)
E:iff (&& (Call (Fn se_is_ptr |Int) [(Var lt |Int)] |Int) (|| (== (Var rt |Int) (Num 1 |Int) |Int) (== (Var rt |Int) (Num 4 |Int) |Int) |Int) |Int)
E:ret (Num 4 |Int)
E:iff (|| (|| (|| (== (Var op |Int) (Num 60 |Char) |Int) (== (Var op |Int) (Num 62 |Char) |Int) |Int) (== (Var op |Int) (Num 108 |Char) |Int) |Int) (== (Var op |Int) (Num 103 |Char) |Int) |Int)
E:iff (&& (Call (Fn se_is_ptr |Int) [(Var lt |Int)] |Int) (== (Var lt |Int) (Var rt |Int) |Int) |Int)
E:ret (Num 4 |Int)
E:exp (= (@ (+ (Var op_s |Char*) (Num 0 |Int) |Char*) |Char) (Cast Char (Var op |Int) |Char) |Char)
E:exp (= (@ (+ (Var op_s |Char*) (Num 1 |Int) |Char*) |Char) (Num 0 |Char) |Char)
E:var (Var op_s |Char*)
E:iff (== (Var op |Int) (Num 101 |Char) |Int)
E:exp (= (Var op_r |Char*) (Str "==" |Char*) |Char*)
E:iff (== (Var op |Int) (Num 110 |Char) |Int)
E:exp (= (Var op_r |Char*) (Str "!=" |Char*) |Char*)
E:iff (== (Var op |Int) (Num 108 |Char) |Int)
E:exp (= (Var op_r |Char*) (Str "<=" |Char*) |Char*)
E:iff (== (Var op |Int) (Num 103 |Char) |Int)
E:exp (= (Var op_r |Char*) (Str ">=" |Char*) |Char*)
E:exp (Call (Fn err2 |Void) [(Str "Wrong operand types in operator: " |Char*) (Var op_r |Char*)] |Void)
E:ret (Num 0 |Int)
E:exp (Call (Fn t2 |Void) [(Str "px_expr " |Char*) (Call (Fn i2s |Char*) [(Var min_prec |Int)] |Char*)] |Void)
E:var (Call (Fn px_term |Int*) [] |Int*)
E:iff (! (Var r |Int*) |Int)
E:ret (Call (Fn tx |Int*) [(Num 0 |Int)] |Int*)
E:whl (&& (!= (Call (Fn memchr |Char*) [(Var OPS |Char*) (Var sc_tkn |Int) (Num 17 |Int)] |Char*) (Num 0 |Int) |Int) (< (Var min_prec |Int) (@ (+ (Var op_prec |Int*) (Var sc_tkn |Int) |Int*) |Int) |Int) |Int)
E:var (@ (+ (Var op_prec |Int*) (Var sc_tkn |Int) |Int*) |Int)
E:iff (== (Var sc_tkn |Int) (Num 61 |Char) |Int)
E:exp (-- (Var p |Int) |Int)
E:var (Var sc_tkn |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:var (Call (Fn px_expr |Int*) [(Var p |Int)] |Int*)
E:iff (! (Var q |Int*) |Int)
E:ret (Call (Fn tx |Int*) [(Num 0 |Int)] |Int*)
E:exp (= (Var r |Int*) (Call (Fn ET_2 |Int*) [(Var t |Int) (Var r |Int*) (Var q |Int*) (Call (Fn se_calc_binop_type |Int) [(Var t |Int) (Var r |Int*) (Var q |Int*)] |Int)] |Int*) |Int*)
E:ret (Call (Fn tx |Int*) [(Var r |Int*)] |Int*)
E:exp (Call (Fn t1 |Void) [(Str "pa_arrayinit" |Char*)] |Void)
E:iff (== (Var sc_tkn |Int) (Num 4 |Int) |Int)
E:iff (!= (Var se_type |Int) (Num 1 |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (= (Var se_items |Int) (+ (Call (Fn strlen |Int) [(Var sc_text |Char*)] |Int) (Num 1 |Int) |Int) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:ret (Call (Fn t_ |Int) [(Num 1 |Int)] |Int)
E:exp (= (Var se_items |Int) (Num 0 |Int) |Int)
E:exp (= (Var se_array_items |Int*) (Num 0 |Int) |Int*)
E:iff (!= (Var sc_tkn |Int) (Num 123 |Char) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (== (Var sc_tkn |Int) (Num 4 |Int) |Int)
E:var (Cast Int* (Call (Fn malloc |Char*) [(* (Num 4 |Int) (Num 600 |Int) |Int)] |Char*) |Int*)
E:exp (= (@ (+ (Var array_items |Int*) (Var se_items |Int) |Int*) |Int) (Var sc_num |Int) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:whl (== (Var sc_tkn |Int) (Num 44 |Char) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:exp (++ (Var se_items |Int) |Int)
E:iff (!= (Var sc_tkn |Int) (Num 4 |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (= (@ (+ (Var array_items |Int*) (Var se_items |Int) |Int*) |Int) (Var sc_num |Int) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:exp (= (Var se_array_items |Int*) (Var array_items |Int*) |Int*)
E:iff (! (Call (Fn pa_integer |Int) [] |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:whl (== (Var sc_tkn |Int) (Num 44 |Char) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:exp (++ (Var se_items |Int) |Int)
E:iff (! (Call (Fn pa_integer |Int) [] |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:iff (!= (Var sc_tkn |Int) (Num 125 |Char) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:exp (++ (Var se_items |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 1 |Int)] |Int)
E:var (Num 2 |Int)
E:iff (< (Var dim |Int) (Num 0 |Int) |Int)
E:exp (= (Var dim |Int) (Num 1 |Int) |Int)
E:exp (= (Var k |Int) (Num 1 |Int) |Int)
E:var (Num 4 |Int)
E:iff (== (Var t |Int) (Num 1 |Int) |Int)
E:exp (= (Var itemsz |Int) (Num 1 |Int) |Int)
E:var (* (Var dim |Int) (Var itemsz |Int) |Int)
E:var (* (/ (- (+ (Var idealsz |Int) (Num 4 |Int) |Int) (Num 1 |Int) |Int) (Num 4 |Int) |Int) (Num 4 |Int) |Int)
E:iff (> (Var se_level |Int) (Num 0 |Int) |Int)
E:exp (= (Var se_local_offset |Int) (- (Var se_local_offset |Int) (Var varsz |Int) |Int) |Int)
E:iff (Var init |Int)
E:iff (== (Var k |Int) (Num 1 |Int) |Int)
E:exp (Call (Fn cg_expr |Void) [(Var init_exprs |Int*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  mov DWORD PTR [ebp" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Call (Fn i2s |Char*) [(Var se_local_offset |Int)] |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str ",eax # init " |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(@ (+ (Var id_table |Char**) (Var id |Int) |Char**) |Char*)] |Void)
E:var (Num 0 |Int)
E:var (Var init_exprs |Int*)
E:fr2 (&& (Var x |Int*) (< (Var n |Int) (Var dim |Int) |Int) |Int)
E:fr3 [(++ (Var n |Int) |Int) (= (Var x |Int*) (Cast Int* (@ (+ (Var x |Int*) (Num 1 |Int) |Int*) |Int) |Int*) |Int*)]
E:exp (Call (Fn cg_expr |Void) [(Cast Int* (@ (+ (Var x |Int*) (Num 0 |Int) |Int*) |Int) |Int*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  mov DWORD PTR [ebp" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Call (Fn i2s |Char*) [(+ (Var se_local_offset |Int) (* (Var n |Int) (Num 4 |Int) |Int) |Int)] |Char*)] |Void)
E:iff (!= (Var n |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn cg_n |Void) [(Str ",eax" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str ",eax # init " |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(@ (+ (Var id_table |Char**) (Var id |Int) |Char**) |Char*)] |Void)
E:fr2 (< (Var n |Int) (Var dim |Int) |Int)
E:fr3 [(++ (Var n |Int) |Int)]
E:exp (Call (Fn cg_o |Void) [(Str "  mov DWORD PTR [ebp" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Call (Fn i2s |Char*) [(+ (Var se_local_offset |Int) (* (Var n |Int) (Num 4 |Int) |Int) |Int)] |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str ",0" |Char*)] |Void)
E:ret (Call (Fn st_add |Int) [(Var id |Int) (Var t |Int) (Var k |Int) (Var se_local_offset |Int) (Var dim |Int)] |Int)
E:iff (|| (== (Var init |Int) (Num 0 |Int) |Int) (&& (== (Var init |Int) (Num 2 |Int) |Int) (== (Var init_exprs |Int*) (Num 0 |Int) |Int) |Int) |Int)
E:var (Call (Fn st_add |Int) [(Var id |Int) (Var t |Int) (Var k |Int) (+ (Var se_bss_offset |Int) (Num 100000 |Int) |Int) (Var dim |Int)] |Int)
E:exp (= (Var se_bss_offset |Int) (+ (Var se_bss_offset |Int) (Var varsz |Int) |Int) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "  .globl _" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(@ (+ (Var id_table |Char**) (Var id |Int) |Char**) |Char*)] |Void)
E:iff (!= (Var cg_section |Int) (Num 3 |Int) |Int)
E:exp (= (Var cg_section |Int) (Num 3 |Int) |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  .bss" |Char*)] |Void)
E:iff (&& (>= (Var idealsz |Int) (Num 4 |Int) |Int) (!= (Var cg_bss_align |Int) (Num 0 |Int) |Int) |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  .align 4" |Char*)] |Void)
E:exp (= (Var cg_bss_align |Int) (Num 0 |Int) |Int)
E:exp (= (Var cg_bss_align |Int) (% (+ (Var cg_bss_align |Int) (Var idealsz |Int) |Int) (Num 4 |Int) |Int) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "_" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(@ (+ (Var id_table |Char**) (Var id |Int) |Char**) |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str ":" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  .space " |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Call (Fn i2s |Char*) [(Var idealsz |Int)] |Char*)] |Void)
E:ret (Var n |Int)
E:var (Call (Fn st_add |Int) [(Var id |Int) (Var t |Int) (Var k |Int) (Var se_data_offset |Int) (Var dim |Int)] |Int)
E:exp (= (Var se_data_offset |Int) (+ (Var se_data_offset |Int) (Var varsz |Int) |Int) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "  .globl _" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(@ (+ (Var id_table |Char**) (Var id |Int) |Char**) |Char*)] |Void)
E:iff (!= (Var cg_section |Int) (Num 2 |Int) |Int)
E:exp (= (Var cg_section |Int) (Num 2 |Int) |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  .data" |Char*)] |Void)
E:iff (&& (>= (Var idealsz |Int) (Num 4 |Int) |Int) (!= (Var cg_data_align |Int) (Num 0 |Int) |Int) |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  .align 4" |Char*)] |Void)
E:exp (= (Var cg_data_align |Int) (Num 0 |Int) |Int)
E:exp (= (Var cg_data_align |Int) (% (+ (Var cg_data_align |Int) (Var idealsz |Int) |Int) (Num 4 |Int) |Int) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "_" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(@ (+ (Var id_table |Char**) (Var id |Int) |Char**) |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str ":" |Char*)] |Void)
E:iff (&& (&& (== (Var init |Int) (Num 4 |Int) |Int) (== (Var t |Int) (Num 1 |Int) |Int) |Int) (== (Var k |Int) (Num 2 |Int) |Int) |Int)
E:exp (Call (Fn cg_sl_str |Void) [(Cast Int (Var init_exprs |Int*) |Int)] |Void)
E:var (- (Var dim |Int) (+ (Call (Fn strlen |Int) [(@ (+ (Var sl_table |Char**) (Cast Int (Var init_exprs |Int*) |Int) |Char**) |Char*)] |Int) (Num 1 |Int) |Int) |Int)
E:iff (> (Var tail |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "  .space " |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Call (Fn i2s |Char*) [(Var tail |Int)] |Char*)] |Void)
E:iff (&& (&& (== (Var init |Int) (Num 4 |Int) |Int) (== (Var t |Int) (Num 2 |Int) |Int) |Int) (== (Var k |Int) (Num 2 |Int) |Int) |Int)
E:var (Var dim |Int)
E:iff (> (Var items |Int) (Var se_items |Int) |Int)
E:exp (= (Var items |Int) (Var se_items |Int) |Int)
E:var (Num 0 |Int)
E:fr2 (< (Var i |Int) (Var items |Int) |Int)
E:fr3 [(++ (Var i |Int) |Int)]
E:exp (Call (Fn cg_2n |Void) [(Str "  .long S" |Char*) (Call (Fn i2s |Char*) [(@ (+ (Var init_exprs |Int*) (Var i |Int) |Int*) |Int)] |Char*)] |Void)
E:iff (< (Var i |Int) (Var dim |Int) |Int)
E:exp (Call (Fn cg_2n |Void) [(Str "  .space " |Char*) (Call (Fn i2s |Char*) [(* (Num 4 |Int) (- (Var dim |Int) (Var items |Int) |Int) |Int)] |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  .long " |Char*)] |Void)
E:iff (== (Var t |Int) (Num 2 |Int) |Int)
E:exp (Call (Fn cg_2n |Void) [(Str "S" |Char*) (Call (Fn i2s |Char*) [(Cast Int (Var init_exprs |Int*) |Int)] |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Call (Fn i2s |Char*) [(Cast Int (Var init_exprs |Int*) |Int)] |Char*)] |Void)
E:ret (Var n |Int)
E:exp (Call (Fn assert |Void) [(|| (|| (|| (== (Var sc_tkn |Int) (Num 61 |Char) |Int) (== (Var sc_tkn |Int) (Num 91 |Char) |Int) |Int) (== (Var sc_tkn |Int) (Num 44 |Char) |Int) |Int) (== (Var sc_tkn |Int) (Num 59 |Char) |Int) |Int) (Str "var" |Char*)] |Void)
E:exp (Call (Fn t1 |Void) [(Str "pa_vartail" |Char*)] |Void)
E:var (+ (Var se_type |Int) (Var se_stars |Int) |Int)
E:var (Var sc_num |Int)
E:var (Call (Fn st_find |Int) [(Var id |Int)] |Int)
E:iff (|| (&& (> (Var se_level |Int) (Num 0 |Int) |Int) (>= (Var k |Int) (Var st_local |Int) |Int) |Int) (&& (== (Var se_level |Int) (Num 0 |Int) |Int) (>= (Var k |Int) (Num 0 |Int) |Int) |Int) |Int)
E:exp (Call (Fn p2n |Void) [(Str "duplicate var " |Char*) (@ (+ (Var id_table |Char**) (Var id |Int) |Char**) |Char*)] |Void)
E:iff (> (Var se_level |Int) (Num 0 |Int) |Int)
E:exp (++ (Var se_lvars |Int) |Int)
E:exp (++ (Var se_gvars |Int) |Int)
E:iff (== (Var sc_tkn |Int) (Num 61 |Char) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (== (Var se_level |Int) (Num 0 |Int) |Int)
E:iff (== (Var sc_tkn |Int) (Num 4 |Int) |Int)
E:exp (Call (Fn se_add_var |Int) [(Var id |Int) (Var t |Int) (Neg (Num 1 |Int) |Int) (Num 4 |Int) (Cast Int* (Var sc_num |Int) |Int*)] |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (! (Call (Fn pa_integer |Int) [] |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn se_add_var |Int) [(Var id |Int) (Var t |Int) (Neg (Num 1 |Int) |Int) (Num 2 |Int) (Cast Int* (Var se_value |Int) |Int*)] |Int)
E:var (Call (Fn px_expr |Int*) [(Num 0 |Int)] |Int*)
E:iff (! (Var e |Int*) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:iff (&& (Var ET_TRACE |Int) (Var e |Int*) |Int)
E:exp (Call (Fn p1 |Void) [(Str "E:var " |Char*)] |Void)
E:exp (Call (Fn et_print |Void) [(Var e |Int*)] |Void)
E:exp (Call (Fn p0n |Void) [] |Void)
E:var (Call (Fn se_add_var |Int) [(Var id |Int) (Var t |Int) (Neg (Num 1 |Int) |Int) (Num 0 |Int) (Num 0 |Int)] |Int)
E:exp (Call (Fn cg_expr |Void) [(Var e |Int*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  mov DWORD PTR [ebp" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Call (Fn i2s |Char*) [(@ (+ (Var st_value |Int*) (Var idx |Int) |Int*) |Int)] |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "],eax # " |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(@ (+ (Var id_table |Char**) (Var id |Int) |Char**) |Char*)] |Void)
E:ret (Call (Fn t_ |Int) [(Num 1 |Int)] |Int)
E:iff (!= (Var sc_tkn |Int) (Num 91 |Char) |Int)
E:exp (Call (Fn se_add_var |Int) [(Var id |Int) (Var t |Int) (Neg (Num 1 |Int) |Int) (Num 0 |Int) (Num 0 |Int)] |Int)
E:ret (Call (Fn t_ |Int) [(Num 1 |Int)] |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (== (Var sc_tkn |Int) (Num 93 |Char) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (!= (Var sc_tkn |Int) (Num 61 |Char) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (! (Call (Fn pa_arrayinit |Int) [] |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn se_add_var |Int) [(Var id |Int) (Var t |Int) (Var se_items |Int) (Num 4 |Int) (Var se_array_items |Int*)] |Int)
E:exp (Call (Fn free |Void) [(Cast Char* (Var se_array_items |Int*) |Char*)] |Void)
E:ret (Call (Fn t_ |Int) [(Num 1 |Int)] |Int)
E:iff (! (Call (Fn pa_integer |Int) [] |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:iff (!= (Var sc_tkn |Int) (Num 93 |Char) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:var (Var se_value |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (!= (Var sc_tkn |Int) (Num 61 |Char) |Int)
E:exp (Call (Fn se_add_var |Int) [(Var id |Int) (Var t |Int) (Var dim |Int) (Num 0 |Int) (Num 0 |Int)] |Int)
E:ret (Call (Fn t_ |Int) [(Num 1 |Int)] |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (! (Call (Fn pa_arrayinit |Int) [] |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn se_add_var |Int) [(Var id |Int) (Var t |Int) (Var dim |Int) (Num 4 |Int) (Var se_array_items |Int*)] |Int)
E:exp (Call (Fn free |Void) [(Cast Char* (Var se_array_items |Int*) |Char*)] |Void)
E:ret (Call (Fn t_ |Int) [(Num 1 |Int)] |Int)
E:exp (Call (Fn t1 |Void) [(Str "pa_morevars" |Char*)] |Void)
E:iff (! (Call (Fn pa_vartail |Int) [] |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:whl (== (Var sc_tkn |Int) (Num 44 |Char) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:exp (Call (Fn pa_stars |Int) [] |Int)
E:var (+ (Var se_type |Int) (Var se_stars |Int) |Int)
E:iff (!= (Var sc_tkn |Int) (Num 5 |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (! (Call (Fn pa_vartail |Int) [] |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:iff (!= (Var sc_tkn |Int) (Num 59 |Char) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:ret (Call (Fn t_ |Int) [(Num 1 |Int)] |Int)
E:exp (Call (Fn t1 |Void) [(Str "pa_vardef_or_expr" |Char*)] |Void)
E:iff (&& (!= (Var sc_tkn |Int) (+ (Num 128 |Int) (Num 2 |Int) |Int) |Int) (!= (Var sc_tkn |Int) (+ (Num 128 |Int) (Num 1 |Int) |Int) |Int) |Int)
E:var (Call (Fn px_expr |Int*) [(Num 0 |Int)] |Int*)
E:iff (|| (! (Var e |Int*) |Int) (!= (Var sc_tkn |Int) (Num 59 |Char) |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:iff (&& (Var ET_TRACE |Int) (Var e |Int*) |Int)
E:exp (Call (Fn p1 |Void) [(Str "E:exp " |Char*)] |Void)
E:exp (Call (Fn et_print |Void) [(Var e |Int*)] |Void)
E:exp (Call (Fn p0n |Void) [] |Void)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:exp (Call (Fn cg_expr |Void) [(Cast Int* (Var e |Int*) |Int*)] |Void)
E:ret (Call (Fn t_ |Int) [(Num 1 |Int)] |Int)
E:iff (! (Call (Fn pa_type |Int) [] |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn pa_stars |Int) [] |Int)
E:iff (!= (Var sc_tkn |Int) (Num 5 |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:ret (Call (Fn t_ |Int) [(Call (Fn pa_morevars |Int) [] |Int)] |Int)
E:exp (Call (Fn t1 |Void) [(Str "pa_argdef" |Char*)] |Void)
E:iff (! (Call (Fn pa_type |Int) [] |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn pa_stars |Int) [] |Int)
E:var (+ (Var se_type |Int) (Var se_stars |Int) |Int)
E:iff (!= (Var sc_tkn |Int) (Num 5 |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (++ (Var se_arg_count |Int) |Int)
E:exp (Call (Fn st_add |Int) [(Var sc_num |Int) (Var t |Int) (Num 3 |Int) (+ (* (Var se_arg_count |Int) (Num 4 |Int) |Int) (Num 4 |Int) |Int) (Num 0 |Int)] |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:ret (Call (Fn t_ |Int) [(Num 1 |Int)] |Int)
E:exp (Call (Fn t1 |Void) [(Str "pa_args" |Char*)] |Void)
E:exp (= (Var se_arg_count |Int) (Num 0 |Int) |Int)
E:iff (! (Call (Fn pa_argdef |Int) [] |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 1 |Int)] |Int)
E:whl (== (Var sc_tkn |Int) (Num 44 |Char) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (! (Call (Fn pa_argdef |Int) [] |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:ret (Call (Fn t_ |Int) [(Num 1 |Int)] |Int)
E:exp (Call (Fn t1 |Void) [(Str "pa_stmt" |Char*)] |Void)
E:exp (Call (Fn assert |Void) [(> (Var se_level |Int) (Num 0 |Int) |Int) (Str "stmt in fns only" |Char*)] |Void)
E:exp (= (Var se_last_stmt_ret |Int) (Num 0 |Int) |Int)
E:iff (== (Var sc_tkn |Int) (Num 59 |Char) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:ret (Call (Fn t_ |Int) [(Num 1 |Int)] |Int)
E:iff (== (Var sc_tkn |Int) (Num 123 |Char) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:exp (++ (Var se_level |Int) |Int)
E:var (Var st_count |Int)
E:var (Var se_local_offset |Int)
E:whl (!= (Var sc_tkn |Int) (Num 125 |Char) |Int)
E:iff (! (Call (Fn pa_stmt |Int) [] |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (< (Var se_local_offset |Int) (Var se_max_l_offset |Int) |Int)
E:exp (= (Var se_max_l_offset |Int) (Var se_local_offset |Int) |Int)
E:iff (> (Var st_count |Int) (Var block_local_start |Int) |Int)
E:iff (Var ST_DUMP |Int)
E:exp (Call (Fn p1n |Void) [(Str "block" |Char*)] |Void)
E:exp (Call (Fn st_dump |Int) [(Var block_local_start |Int) (Neg (Num 1 |Int) |Int)] |Int)
E:exp (= (Var st_count |Int) (Var block_local_start |Int) |Int)
E:exp (= (Var se_local_offset |Int) (Var block_local_offset |Int) |Int)
E:exp (-- (Var se_level |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 1 |Int)] |Int)
E:iff (== (Var sc_tkn |Int) (+ (Num 128 |Int) (Num 8 |Int) |Int) |Int)
E:var (Call (Fn cg_current_loop_label |Int) [] |Int)
E:iff (< (Var loop_label |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn err1 |Void) [(Str "break outside loop" |Char*)] |Void)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (!= (Var sc_tkn |Int) (Num 59 |Char) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  jmp E" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Call (Fn i2s |Char*) [(Var loop_label |Int)] |Char*)] |Void)
E:ret (Call (Fn t_ |Int) [(Num 1 |Int)] |Int)
E:iff (== (Var sc_tkn |Int) (+ (Num 128 |Int) (Num 9 |Int) |Int) |Int)
E:exp (= (Var se_last_stmt_ret |Int) (Num 1 |Int) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (== (Var sc_tkn |Int) (Num 59 |Char) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "  jmp R" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Call (Fn i2s |Char*) [(Var cg_fn_label |Int)] |Char*)] |Void)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:ret (Call (Fn t_ |Int) [(Num 1 |Int)] |Int)
E:var (Call (Fn px_expr |Int*) [(Num 0 |Int)] |Int*)
E:iff (&& (Var ET_TRACE |Int) (Var e |Int*) |Int)
E:exp (Call (Fn p1 |Void) [(Str "E:ret " |Char*)] |Void)
E:exp (Call (Fn et_print |Void) [(Var e |Int*)] |Void)
E:exp (Call (Fn p0n |Void) [] |Void)
E:iff (|| (! (Var e |Int*) |Int) (!= (Var sc_tkn |Int) (Num 59 |Char) |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:iff (Var e |Int*)
E:exp (Call (Fn cg_expr |Void) [(Var e |Int*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  jmp R" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Call (Fn i2s |Char*) [(Var cg_fn_label |Int)] |Char*)] |Void)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:ret (Call (Fn t_ |Int) [(Num 1 |Int)] |Int)
E:iff (== (Var sc_tkn |Int) (+ (Num 128 |Int) (Num 6 |Int) |Int) |Int)
E:var (Call (Fn cg_new_loop_label |Int) [] |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (!= (Var sc_tkn |Int) (Num 40 |Char) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn cg_o |Void) [(Str "L" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Call (Fn i2s |Char*) [(Var loop_label |Int)] |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str ":" |Char*)] |Void)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (|| (! (= (Var c |Int*) (Call (Fn px_expr |Int*) [(Num 0 |Int)] |Int*) |Int*) |Int) (!= (Var sc_tkn |Int) (Num 41 |Char) |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn cg_expr |Void) [(Var c |Int*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  test eax,eax" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  jz E" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Call (Fn i2s |Char*) [(Var loop_label |Int)] |Char*)] |Void)
E:iff (&& (Var ET_TRACE |Int) (Var c |Int*) |Int)
E:exp (Call (Fn p1 |Void) [(Str "E:whl " |Char*)] |Void)
E:exp (Call (Fn et_print |Void) [(Cast Int* (Var c |Int*) |Int*)] |Void)
E:exp (Call (Fn p0n |Void) [] |Void)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:var (Call (Fn pa_stmt |Int) [] |Int)
E:exp (Call (Fn cg_o |Void) [(Str "  jmp L" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Call (Fn i2s |Char*) [(Var loop_label |Int)] |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "E" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Call (Fn i2s |Char*) [(Var loop_label |Int)] |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str ":" |Char*)] |Void)
E:exp (Call (Fn cg_pop_loop_label |Void) [] |Void)
E:ret (Call (Fn t_ |Int) [(Var r |Int)] |Int)
E:iff (== (Var sc_tkn |Int) (+ (Num 128 |Int) (Num 4 |Int) |Int) |Int)
E:var (Call (Fn cg_new_label |Int) [] |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (!= (Var sc_tkn |Int) (Num 40 |Char) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (|| (! (= (Var c |Int*) (Call (Fn px_expr |Int*) [(Num 0 |Int)] |Int*) |Int*) |Int) (!= (Var sc_tkn |Int) (Num 41 |Char) |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn cg_expr |Void) [(Var c |Int*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  test eax,eax" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  jz J" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Call (Fn i2s |Char*) [(Var if_label |Int)] |Char*)] |Void)
E:iff (&& (Var ET_TRACE |Int) (Var c |Int*) |Int)
E:exp (Call (Fn p1 |Void) [(Str "E:iff " |Char*)] |Void)
E:exp (Call (Fn et_print |Void) [(Cast Int* (Var c |Int*) |Int*)] |Void)
E:exp (Call (Fn p0n |Void) [] |Void)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (! (Call (Fn pa_stmt |Int) [] |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:iff (== (Var sc_tkn |Int) (+ (Num 128 |Int) (Num 5 |Int) |Int) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "  jmp Z" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Call (Fn i2s |Char*) [(Var if_label |Int)] |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "J" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Call (Fn i2s |Char*) [(Var if_label |Int)] |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str ":" |Char*)] |Void)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (! (Call (Fn pa_stmt |Int) [] |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn cg_o |Void) [(Str "Z" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Call (Fn i2s |Char*) [(Var if_label |Int)] |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str ":" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "J" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Call (Fn i2s |Char*) [(Var if_label |Int)] |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str ":" |Char*)] |Void)
E:ret (Call (Fn t_ |Int) [(Num 1 |Int)] |Int)
E:iff (== (Var sc_tkn |Int) (+ (Num 128 |Int) (Num 7 |Int) |Int) |Int)
E:var (Call (Fn cg_new_loop_label |Int) [] |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (!= (Var sc_tkn |Int) (Num 40 |Char) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:exp (++ (Var se_level |Int) |Int)
E:var (Var st_count |Int)
E:var (Var se_local_offset |Int)
E:iff (!= (Var sc_tkn |Int) (Num 59 |Char) |Int)
E:iff (! (Call (Fn pa_vardef_or_expr |Int) [] |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:var (Num 0 |Int)
E:iff (!= (Var sc_tkn |Int) (Num 59 |Char) |Int)
E:iff (! (= (Var e2 |Int*) (Call (Fn px_expr |Int*) [(Num 0 |Int)] |Int*) |Int*) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:iff (&& (Var ET_TRACE |Int) (Var e2 |Int*) |Int)
E:exp (Call (Fn p1 |Void) [(Str "E:fr2 " |Char*)] |Void)
E:exp (Call (Fn et_print |Void) [(Cast Int* (Var e2 |Int*) |Int*)] |Void)
E:exp (Call (Fn p0n |Void) [] |Void)
E:var (Num 0 |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (!= (Var sc_tkn |Int) (Num 41 |Char) |Int)
E:iff (! (= (Var e3 |Int*) (Call (Fn px_exprs |Int*) [] |Int*) |Int*) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:iff (&& (Var ET_TRACE |Int) (Var e3 |Int*) |Int)
E:exp (Call (Fn p1 |Void) [(Str "E:fr3 [" |Char*)] |Void)
E:exp (Call (Fn et_print_exprs |Void) [(Cast Int** (Var e3 |Int*) |Int**)] |Void)
E:iff (!= (Var sc_tkn |Int) (Num 41 |Char) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (Var e3 |Int*)
E:exp (Call (Fn cg_o |Void) [(Str "  jmp C" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Call (Fn i2s |Char*) [(Var loop_label |Int)] |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "P" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Call (Fn i2s |Char*) [(Var loop_label |Int)] |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str ":" |Char*)] |Void)
E:iff (Var e3 |Int*)
E:exp (Call (Fn cg_exprs |Void) [(Cast Int** (Var e3 |Int*) |Int**)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "C" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Call (Fn i2s |Char*) [(Var loop_label |Int)] |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str ":" |Char*)] |Void)
E:iff (Var e2 |Int*)
E:exp (Call (Fn cg_expr |Void) [(Var e2 |Int*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str "  test eax,eax" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "  jz E" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Call (Fn i2s |Char*) [(Var loop_label |Int)] |Char*)] |Void)
E:var (Call (Fn pa_stmt |Int) [] |Int)
E:iff (< (Var se_local_offset |Int) (Var se_max_l_offset |Int) |Int)
E:exp (= (Var se_max_l_offset |Int) (Var se_local_offset |Int) |Int)
E:iff (> (Var st_count |Int) (Var block_local_start |Int) |Int)
E:iff (Var ST_DUMP |Int)
E:exp (Call (Fn p1n |Void) [(Str "for" |Char*)] |Void)
E:exp (Call (Fn st_dump |Int) [(Var block_local_start |Int) (Neg (Num 1 |Int) |Int)] |Int)
E:exp (= (Var st_count |Int) (Var block_local_start |Int) |Int)
E:exp (= (Var se_local_offset |Int) (Var block_local_offset |Int) |Int)
E:exp (-- (Var se_level |Int) |Int)
E:exp (Call (Fn cg_o |Void) [(Str "  jmp P" |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Call (Fn i2s |Char*) [(Var loop_label |Int)] |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Str "E" |Char*)] |Void)
E:exp (Call (Fn cg_o |Void) [(Call (Fn i2s |Char*) [(Var loop_label |Int)] |Char*)] |Void)
E:exp (Call (Fn cg_n |Void) [(Str ":" |Char*)] |Void)
E:exp (Call (Fn cg_pop_loop_label |Void) [] |Void)
E:ret (Call (Fn t_ |Int) [(Var rc |Int)] |Int)
E:var (Call (Fn pa_vardef_or_expr |Int) [] |Int)
E:ret (Call (Fn t_ |Int) [(Var e |Int)] |Int)
E:exp (Call (Fn assert |Void) [(== (Var sc_tkn |Int) (Num 40 |Char) |Int) (Str "pa_func not at '('" |Char*)] |Void)
E:exp (Call (Fn assert |Void) [(== (Var se_level |Int) (Num 0 |Int) |Int) (Str "pa_func lvl!=0" |Char*)] |Void)
E:exp (Call (Fn t1 |Void) [(Str "pa_func" |Char*)] |Void)
E:var (Num 0 |Int)
E:var (Num 0 |Int)
E:var (Var sc_num |Int)
E:var (+ (Var se_type |Int) (Var se_stars |Int) |Int)
E:var (Call (Fn st_find |Int) [(Var id |Int)] |Int)
E:iff (&& (>= (Var k2 |Int) (Num 0 |Int) |Int) (!= (@ (+ (Var st_kind |Char*) (Var k2 |Int) |Char*) |Char) (Num 4 |Int) |Int) |Int)
E:exp (Call (Fn err2 |Void) [(Str "This was defined as not function before" |Char*) (@ (+ (Var id_table |Char**) (Var id |Int) |Char**) |Char*)] |Void)
E:var (Call (Fn st_add |Int) [(Var id |Int) (Var t |Int) (Num 4 |Int) (Num 0 |Int) (Num 0 |Int)] |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:exp (= (Var se_level |Int) (Num 1 |Int) |Int)
E:exp (= (Var st_local |Int) (Var st_count |Int) |Int)
E:iff (|| (! (Call (Fn pa_args |Int) [] |Int) |Int) (!= (Var sc_tkn |Int) (Num 41 |Char) |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:var (Call (Fn st_copy_args |Char*) [(Var st_local |Int) (Var se_arg_count |Int)] |Char*)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (== (Var sc_tkn |Int) (Num 59 |Char) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (>= (Var k2 |Int) (Num 0 |Int) |Int)
E:iff (|| (!= (Var t |Int) (@ (+ (Var st_type |Char*) (Var k2 |Int) |Char*) |Char) |Int) (Call (Fn strcmp |Int) [(Cast Char* (@ (+ (Var st_prop |Int*) (Var k2 |Int) |Int*) |Int) |Char*) (Var args |Char*)] |Int) |Int)
E:exp (Call (Fn err2 |Void) [(Str "duplicate function declaration (not matching)" |Char*) (@ (+ (Var id_table |Char**) (Var id |Int) |Char**) |Char*)] |Void)
E:exp (= (@ (+ (Var st_prop |Int*) (Var k |Int) |Int*) |Int) (Cast Int (Var args |Char*) |Int) |Int)
E:exp (= (Var st_count |Int) (Var st_local |Int) |Int)
E:exp (= (Var se_level |Int) (Num 0 |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 1 |Int)] |Int)
E:iff (== (Var sc_tkn |Int) (Num 123 |Char) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:exp (= (Var se_lvars |Int) (Num 0 |Int) |Int)
E:iff (>= (Var k2 |Int) (Num 0 |Int) |Int)
E:iff (!= (@ (+ (Var st_value |Int*) (Var k2 |Int) |Int*) |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn err2 |Void) [(Str "function re-definition" |Char*) (@ (+ (Var id_table |Char**) (Var id |Int) |Char**) |Char*)] |Void)
E:iff (|| (!= (Var t |Int) (@ (+ (Var st_type |Char*) (Var k2 |Int) |Char*) |Char) |Int) (Call (Fn strcmp |Int) [(Cast Char* (@ (+ (Var st_prop |Int*) (Var k2 |Int) |Int*) |Int) |Char*) (Var args |Char*)] |Int) |Int)
E:exp (Call (Fn err2 |Void) [(Str "not matching function definition" |Char*) (@ (+ (Var id_table |Char**) (Var id |Int) |Char**) |Char*)] |Void)
E:exp (= (@ (+ (Var st_value |Int*) (Var k2 |Int) |Int*) |Int) (Num 1 |Int) |Int)
E:exp (= (@ (+ (Var st_prop |Int*) (Var k2 |Int) |Int*) |Int) (Cast Int (Var args |Char*) |Int) |Int)
E:exp (= (Var redefined |Int) (Num 1 |Int) |Int)
E:exp (= (@ (+ (Var st_value |Int*) (Var k |Int) |Int*) |Int) (Num 1 |Int) |Int)
E:exp (= (@ (+ (Var st_prop |Int*) (Var k |Int) |Int*) |Int) (Cast Int (Var args |Char*) |Int) |Int)
E:exp (= (Var cg_fn_label |Int) (Call (Fn cg_new_label |Int) [] |Int) |Int)
E:exp (Call (Fn cg_fn_begin |Void) [(@ (+ (Var id_table |Char**) (Var id |Int) |Char**) |Char*)] |Void)
E:exp (Call (Fn cg_suspend |Void) [] |Void)
E:iff (Call (Fn strequ |Int) [(@ (+ (Var id_table |Char**) (Var id |Int) |Char**) |Char*) (Str "main" |Char*)] |Int)
E:exp (Call (Fn cg_n |Void) [(Str "  call ___main\n" |Char*)] |Void)
E:exp (= (Var se_local_offset |Int) (Num 0 |Int) |Int)
E:exp (= (Var se_max_l_offset |Int) (Num 0 |Int) |Int)
E:var (Var st_count |Int)
E:var (Var se_local_offset |Int)
E:whl (!= (Var sc_tkn |Int) (Num 125 |Char) |Int)
E:iff (! (Call (Fn pa_stmt |Int) [] |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (< (Var se_local_offset |Int) (Var se_max_l_offset |Int) |Int)
E:exp (= (Var se_max_l_offset |Int) (Var se_local_offset |Int) |Int)
E:iff (Var ST_DUMP |Int)
E:exp (Call (Fn p2n |Void) [(Str "fn " |Char*) (@ (+ (Var id_table |Char**) (Var id |Int) |Char**) |Char*)] |Void)
E:exp (Call (Fn st_dump |Int) [(Var st_local |Int) (Neg (Num 1 |Int) |Int)] |Int)
E:exp (Call (Fn p2n |Void) [(Str "stk " |Char*) (Call (Fn i2s |Char*) [(Var se_max_l_offset |Int)] |Char*)] |Void)
E:exp (Call (Fn p0n |Void) [] |Void)
E:iff (Var redefined |Int)
E:exp (-- (Var st_local |Int) |Int)
E:exp (= (Var st_count |Int) (Var st_local |Int) |Int)
E:exp (= (Var se_level |Int) (Num 0 |Int) |Int)
E:iff (&& (! (Var se_last_stmt_ret |Int) |Int) (!= (Var t |Int) (Num 0 |Int) |Int) |Int)
E:exp (Call (Fn warn |Void) [(Str "last stmt was not return!" |Char*)] |Void)
E:exp (= (Var ret0 |Int) (Num 1 |Int) |Int)
E:iff (< (Var se_max_l_offset |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn memcopy |Void) [(Var cmd |Char*) (Str "  sub esp," |Char*) (Num 10 |Int)] |Void)
E:var (Call (Fn i2s |Char*) [(Neg (Var se_max_l_offset |Int) |Int)] |Char*)
E:var (Call (Fn strlen |Int) [(Var number |Char*)] |Int)
E:exp (Call (Fn memcopy |Void) [(+ (Var cmd |Char*) (Num 10 |Int) |Char*) (Var number |Char*) (Var nn |Int)] |Void)
E:exp (Call (Fn memcopy |Void) [(+ (+ (Var cmd |Char*) (Num 10 |Int) |Char*) (Var nn |Int) |Char*) (Str "\n" |Char*) (Num 2 |Int)] |Void)
E:exp (Call (Fn cg_resume |Void) [(Var cmd |Char*)] |Void)
E:exp (Call (Fn cg_resume |Void) [(Str "  # no local variables\n" |Char*)] |Void)
E:exp (Call (Fn cg_fn_end |Void) [(Var ret0 |Int)] |Void)
E:ret (Call (Fn t_ |Int) [(Num 1 |Int)] |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn t1 |Void) [(Str "pa_enumerator" |Char*)] |Void)
E:iff (!= (Var sc_tkn |Int) (Num 5 |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:var (Var sc_num |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (== (Var sc_tkn |Int) (Num 61 |Char) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (! (Call (Fn pa_integer |Int) [] |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (= (Var se_enum |Int) (Var se_value |Int) |Int)
E:exp (Call (Fn st_add |Int) [(Var id |Int) (Num 4 |Int) (Num 0 |Int) (Var se_enum |Int) (Num 0 |Int)] |Int)
E:exp (++ (Var se_enum |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 1 |Int)] |Int)
E:exp (Call (Fn t1 |Void) [(Str "pa_enumdef" |Char*)] |Void)
E:iff (!= (Var sc_tkn |Int) (Num 123 |Char) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (= (Var se_enum |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (! (Call (Fn pa_enumerator |Int) [] |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:whl (== (Var sc_tkn |Int) (Num 44 |Char) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (! (Call (Fn pa_enumerator |Int) [] |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:iff (!= (Var sc_tkn |Int) (Num 125 |Char) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (!= (Var sc_tkn |Int) (Num 59 |Char) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:ret (Call (Fn t_ |Int) [(Num 1 |Int)] |Int)
E:exp (Call (Fn t1 |Void) [(Str "pa_decl_or_def" |Char*)] |Void)
E:iff (== (Var sc_tkn |Int) (+ (Num 128 |Int) (Num 3 |Int) |Int) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:ret (Call (Fn t_ |Int) [(Call (Fn pa_enumdef |Int) [] |Int)] |Int)
E:iff (== (Var sc_tkn |Int) (+ (Num 128 |Int) (Num 0 |Int) |Int) |Int)
E:exp (= (Var se_type |Int) (Num 0 |Int) |Int)
E:exp (= (Var se_stars |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (!= (Var sc_tkn |Int) (Num 5 |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (!= (Var sc_tkn |Int) (Num 40 |Char) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:ret (Call (Fn t_ |Int) [(Call (Fn pa_func |Int) [] |Int)] |Int)
E:iff (! (Call (Fn pa_type |Int) [] |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn pa_stars |Int) [] |Int)
E:iff (!= (Var sc_tkn |Int) (Num 5 |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Num 0 |Int)] |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:iff (!= (Var sc_tkn |Int) (Num 40 |Char) |Int)
E:ret (Call (Fn t_ |Int) [(Call (Fn pa_morevars |Int) [] |Int)] |Int)
E:ret (Call (Fn t_ |Int) [(Call (Fn pa_func |Int) [] |Int)] |Int)
E:exp (Call (Fn t1 |Void) [(Str "pa_program" |Char*)] |Void)
E:var (Num 1 |Int)
E:exp (Call (Fn sc_next |Void) [] |Void)
E:whl (!= (Var sc_tkn |Int) (Num 1 |Int) |Int)
E:iff (! (Call (Fn pa_decl_or_def |Int) [] |Int) |Int)
E:exp (= (Var rc |Int) (Num 0 |Int) |Int)
E:ret (Call (Fn t_ |Int) [(Var rc |Int)] |Int)
E:iff (> (Var cg_file |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn close |Int) [(Var cg_file |Int)] |Int)
E:exp (= (Var cg_file |Int) (Num 0 |Int) |Int)
E:iff (> (Var rd_file |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn close |Int) [(Var rd_file |Int)] |Int)
E:exp (= (Var rd_file |Int) (Num 0 |Int) |Int)
E:var (Num 0 |Int)
E:var (Num 0 |Int)
E:iff (|| (== (Var ac |Int) (Num 1 |Int) |Int) (&& (== (Var ac |Int) (Num 2 |Int) |Int) (|| (Call (Fn strequ |Int) [(@ (+ (Var av |Char**) (Num 1 |Int) |Char**) |Char*) (Str "-h" |Char*)] |Int) (Call (Fn strequ |Int) [(@ (+ (Var av |Char**) (Num 1 |Int) |Char**) |Char*) (Str "--help" |Char*)] |Int) |Int) |Int) |Int)
E:exp (Call (Fn p1 |Void) [(Str "cc.exe [options] file.c [options]\n" |Char*)] |Void)
E:exp (Call (Fn p1 |Void) [(Str "-T  show tokens\n" |Char*)] |Void)
E:exp (Call (Fn p1 |Void) [(Str "-P  show parser trace\n" |Char*)] |Void)
E:exp (Call (Fn p1 |Void) [(Str "-I  show id table trace\n" |Char*)] |Void)
E:exp (Call (Fn p1 |Void) [(Str "-D  dump id table data and string literal table\n" |Char*)] |Void)
E:exp (Call (Fn p1 |Void) [(Str "-S  dump symbol table\n" |Char*)] |Void)
E:exp (Call (Fn p1 |Void) [(Str "-E  trace expressions\n" |Char*)] |Void)
E:exp (Call (Fn p1 |Void) [(Str "-L  omit output of line numbers in assembler\n" |Char*)] |Void)
E:exp (Call (Fn p1 |Void) [(Str "-o FILE  specify output file name\n" |Char*)] |Void)
E:ret (Num 0 |Int)
E:var (Num 1 |Int)
E:fr2 (< (Var i |Int) (Var ac |Int) |Int)
E:fr3 [(++ (Var i |Int) |Int)]
E:iff (!= (@ (@ (+ (Var av |Char**) (Var i |Int) |Char**) |Char*) |Char) (Num 45 |Char) |Int)
E:exp (= (Var filename |Char*) (@ (+ (Var av |Char**) (Var i |Int) |Char**) |Char*) |Char*)
E:iff (== (@ (+ (@ (+ (Var av |Char**) (Var i |Int) |Char**) |Char*) (Num 1 |Int) |Char*) |Char) (Num 84 |Char) |Int)
E:exp (= (Var SC_DEBUG |Int) (Num 1 |Int) |Int)
E:iff (== (@ (+ (@ (+ (Var av |Char**) (Var i |Int) |Char**) |Char*) (Num 1 |Int) |Char*) |Char) (Num 80 |Char) |Int)
E:exp (= (Var PA_TRACE |Int) (Num 1 |Int) |Int)
E:iff (== (@ (+ (@ (+ (Var av |Char**) (Var i |Int) |Char**) |Char*) (Num 1 |Int) |Char*) |Char) (Num 73 |Char) |Int)
E:exp (= (Var IT_DEBUG |Int) (Num 1 |Int) |Int)
E:iff (== (@ (+ (@ (+ (Var av |Char**) (Var i |Int) |Char**) |Char*) (Num 1 |Int) |Char*) |Char) (Num 68 |Char) |Int)
E:exp (= (Var IT_DUMP |Int) (Num 1 |Int) |Int)
E:iff (== (@ (+ (@ (+ (Var av |Char**) (Var i |Int) |Char**) |Char*) (Num 1 |Int) |Char*) |Char) (Num 83 |Char) |Int)
E:exp (= (Var ST_DUMP |Int) (Num 1 |Int) |Int)
E:iff (== (@ (+ (@ (+ (Var av |Char**) (Var i |Int) |Char**) |Char*) (Num 1 |Int) |Char*) |Char) (Num 69 |Char) |Int)
E:exp (= (Var ET_TRACE |Int) (Num 1 |Int) |Int)
E:iff (== (@ (+ (@ (+ (Var av |Char**) (Var i |Int) |Char**) |Char*) (Num 1 |Int) |Char*) |Char) (Num 76 |Char) |Int)
E:exp (= (Var CG_LINES |Int) (Num 0 |Int) |Int)
E:iff (== (@ (+ (@ (+ (Var av |Char**) (Var i |Int) |Char**) |Char*) (Num 1 |Int) |Char*) |Char) (Num 111 |Char) |Int)
E:exp (= (Var outputfn |Char*) (@ (+ (Var av |Char**) (++ (Var i |Int) |Int) |Char**) |Char*) |Char*)
E:iff (! (Var filename |Char*) |Int)
E:exp (Call (Fn p1 |Void) [(Str "No input file\n" |Char*)] |Void)
E:exp (Call (Fn exit |Void) [(Num 1 |Int)] |Void)
E:exp (= (Var rd_file |Int) (Call (Fn open |Int) [(Var filename |Char*) (Num 0 |Int) (Num 0 |Int)] |Int) |Int)
E:iff (<= (Var rd_file |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn p3 |Void) [(Str "Can't open input file '" |Char*) (Var filename |Char*) (Str "'\n" |Char*)] |Void)
E:exp (Call (Fn exit |Void) [(Num 1 |Int)] |Void)
E:exp (Call (Fn op_set_prec |Void) [] |Void)
E:exp (Call (Fn st_create |Void) [(Num 500 |Int)] |Void)
E:exp (Call (Fn id_table_create |Void) [(Num 1009 |Int)] |Void)
E:exp (Call (Fn sl_table_create |Void) [(Num 500 |Int)] |Void)
E:iff (! (Var outputfn |Char*) |Int)
E:exp (= (Var outputfn |Char*) (Str "a.s" |Char*) |Char*)
E:exp (= (Var cg_file |Int) (Call (Fn open |Int) [(Var outputfn |Char*) (| (| (Num 512 |Int) (Num 1024 |Int) |Int) (Num 1 |Int) |Int) (Num 438 |Int)] |Int) |Int)
E:iff (< (Var cg_file |Int) (Num 0 |Int) |Int)
E:exp (Call (Fn p3 |Void) [(Str "Can't create file '" |Char*) (Var outputfn |Char*) (Str "'\n" |Char*)] |Void)
E:exp (Call (Fn exit |Void) [(Num 1 |Int)] |Void)
E:exp (Call (Fn cg_begin |Void) [(Var filename |Char*)] |Void)
E:iff (! (Call (Fn pa_program |Int) [(Var filename |Char*)] |Int) |Int)
E:exp (Call (Fn err1 |Void) [(Str "wrong syntax" |Char*)] |Void)
E:exp (Call (Fn cg_sl_table |Void) [] |Void)
E:exp (Call (Fn cg_end |Void) [] |Void)
E:exp (Call (Fn before_exit |Void) [] |Void)
E:iff (Var IT_DUMP |Int)
E:exp (Call (Fn id_table_dump |Void) [] |Void)
E:exp (Call (Fn sl_table_dump |Void) [] |Void)
E:iff (Var ST_DUMP |Int)
E:exp (Call (Fn p1 |Void) [(Str "** globals **\nenums:\n" |Char*)] |Void)
E:exp (= (Var n |Int) (Call (Fn st_dump |Int) [(Num 0 |Int) (Num 0 |Int)] |Int) |Int)
E:exp (Call (Fn p1n |Void) [(Call (Fn i2s |Char*) [(Var n |Int)] |Char*)] |Void)
E:exp (Call (Fn p1 |Void) [(Str "vars:\n" |Char*)] |Void)
E:exp (= (Var n |Int) (Call (Fn st_dump |Int) [(Num 0 |Int) (Num 1 |Int)] |Int) |Int)
E:exp (Call (Fn p1n |Void) [(Call (Fn i2s |Char*) [(Var n |Int)] |Char*)] |Void)
E:exp (Call (Fn p1 |Void) [(Str "funcs:\n" |Char*)] |Void)
E:exp (= (Var n |Int) (Call (Fn st_dump |Int) [(Num 0 |Int) (Num 4 |Int)] |Int) |Int)
E:exp (Call (Fn p1n |Void) [(Call (Fn i2s |Char*) [(Var n |Int)] |Char*)] |Void)
E:exp (Call (Fn p2n |Void) [(Str "data size: " |Char*) (Call (Fn i2s |Char*) [(Var se_data_offset |Int)] |Char*)] |Void)
E:exp (Call (Fn p2n |Void) [(Str "bss size: " |Char*) (Call (Fn i2s |Char*) [(Var se_bss_offset |Int)] |Char*)] |Void)
E:iff (Var SC_DEBUG |Int)
E:exp (Call (Fn p2 |Void) [(Call (Fn i2s |Char*) [(Var sc_n_tokens |Int)] |Char*) (Str " tokens\n" |Char*)] |Void)
E:ret (Num 0 |Int)
